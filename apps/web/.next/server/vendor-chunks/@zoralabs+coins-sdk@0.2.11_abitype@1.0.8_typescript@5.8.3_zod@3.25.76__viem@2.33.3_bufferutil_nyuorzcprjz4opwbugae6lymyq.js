"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zoralabs+coins-sdk@0.2.11_abitype@1.0.8_typescript@5.8.3_zod@3.25.76__viem@2.33.3_bufferutil_nyuorzcprjz4opwbugae6lymyq";
exports.ids = ["vendor-chunks/@zoralabs+coins-sdk@0.2.11_abitype@1.0.8_typescript@5.8.3_zod@3.25.76__viem@2.33.3_bufferutil_nyuorzcprjz4opwbugae6lymyq"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@zoralabs+coins-sdk@0.2.11_abitype@1.0.8_typescript@5.8.3_zod@3.25.76__viem@2.33.3_bufferutil_nyuorzcprjz4opwbugae6lymyq/node_modules/@zoralabs/coins-sdk/dist/index.js":
/*!********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@zoralabs+coins-sdk@0.2.11_abitype@1.0.8_typescript@5.8.3_zod@3.25.76__viem@2.33.3_bufferutil_nyuorzcprjz4opwbugae6lymyq/node_modules/@zoralabs/coins-sdk/dist/index.js ***!
  \********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CoinMetadataBuilder: () => (/* binding */ CoinMetadataBuilder),\n/* harmony export */   DeployCurrency: () => (/* binding */ DeployCurrency),\n/* harmony export */   InitialPurchaseCurrency: () => (/* binding */ InitialPurchaseCurrency),\n/* harmony export */   ZoraUploader: () => (/* binding */ ZoraUploader),\n/* harmony export */   cleanAndValidateMetadataURI: () => (/* binding */ cleanAndValidateMetadataURI),\n/* harmony export */   createCoin: () => (/* binding */ createCoin),\n/* harmony export */   createCoinCall: () => (/* binding */ createCoinCall),\n/* harmony export */   createMetadataBuilder: () => (/* binding */ createMetadataBuilder),\n/* harmony export */   createTradeCall: () => (/* binding */ createTradeCall),\n/* harmony export */   createZoraUploaderForCreator: () => (/* binding */ createZoraUploaderForCreator),\n/* harmony export */   getCoin: () => (/* binding */ getCoin2),\n/* harmony export */   getCoinComments: () => (/* binding */ getCoinComments2),\n/* harmony export */   getCoinCreateFromLogs: () => (/* binding */ getCoinCreateFromLogs),\n/* harmony export */   getCoinHolders: () => (/* binding */ getCoinHolders2),\n/* harmony export */   getCoinSwaps: () => (/* binding */ getCoinSwaps2),\n/* harmony export */   getCoins: () => (/* binding */ getCoins2),\n/* harmony export */   getCoinsLastTraded: () => (/* binding */ getCoinsLastTraded),\n/* harmony export */   getCoinsLastTradedUnique: () => (/* binding */ getCoinsLastTradedUnique),\n/* harmony export */   getCoinsMostValuable: () => (/* binding */ getCoinsMostValuable),\n/* harmony export */   getCoinsNew: () => (/* binding */ getCoinsNew),\n/* harmony export */   getCoinsTopGainers: () => (/* binding */ getCoinsTopGainers),\n/* harmony export */   getCoinsTopVolume24h: () => (/* binding */ getCoinsTopVolume24h),\n/* harmony export */   getCreatorCoins: () => (/* binding */ getCreatorCoins),\n/* harmony export */   getMostValuableCreatorCoins: () => (/* binding */ getMostValuableCreatorCoins),\n/* harmony export */   getOnchainCoinDetails: () => (/* binding */ getOnchainCoinDetails),\n/* harmony export */   getProfile: () => (/* binding */ getProfile2),\n/* harmony export */   getProfileBalances: () => (/* binding */ getProfileBalances2),\n/* harmony export */   getProfileCoins: () => (/* binding */ getProfileCoins2),\n/* harmony export */   getURLFromUploadResult: () => (/* binding */ getURLFromUploadResult),\n/* harmony export */   setApiKey: () => (/* binding */ setApiKey),\n/* harmony export */   tradeCoin: () => (/* binding */ tradeCoin),\n/* harmony export */   updateCoinURI: () => (/* binding */ updateCoinURI),\n/* harmony export */   updateCoinURICall: () => (/* binding */ updateCoinURICall),\n/* harmony export */   updatePayoutRecipient: () => (/* binding */ updatePayoutRecipient),\n/* harmony export */   updatePayoutRecipientCall: () => (/* binding */ updatePayoutRecipientCall),\n/* harmony export */   validateImageMimeType: () => (/* binding */ validateImageMimeType),\n/* harmony export */   validateMetadataJSON: () => (/* binding */ validateMetadataJSON),\n/* harmony export */   validateMetadataURIContent: () => (/* binding */ validateMetadataURIContent)\n/* harmony export */ });\n/* harmony import */ var _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @zoralabs/protocol-deployments */ \"(ssr)/../../node_modules/.pnpm/@zoralabs+protocol-deployments@0.6.2/node_modules/@zoralabs/protocol-deployments/dist/index.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/constants/address.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/hash/keccak256.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/encoding/toBytes.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/abi/parseEventLogs.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! viem/chains */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/chains/definitions/baseSepolia.js\");\n/* harmony import */ var viem_chains__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! viem/chains */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/chains/definitions/base.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/encoding/toHex.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/data/slice.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/unit/parseUnits.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/data/pad.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/utils/data/concat.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/constants/abis.js\");\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! viem */ \"(ssr)/../../node_modules/.pnpm/viem@2.33.3_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.25.76/node_modules/viem/_esm/constants/number.js\");\n/* harmony import */ var _hey_api_client_fetch__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @hey-api/client-fetch */ \"(ssr)/../../node_modules/.pnpm/@hey-api+client-fetch@0.8.3/node_modules/@hey-api/client-fetch/dist/index.js\");\n// src/actions/createCoin.ts\n\n\n\n\n// src/constants.ts\n\n\nvar COIN_FACTORY_ADDRESS = _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinFactoryAddress[\"8453\"];\nvar USDC_WETH_POOLS_BY_CHAIN = {\n  [viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id]: \"0xd0b53D9277642d899DF5C87A3966A349A798F224\"\n};\n\n// src/utils/validateClientNetwork.ts\n\nvar validateClientNetwork = (publicClient) => {\n  const clientChainId = publicClient?.chain?.id;\n  if (clientChainId === viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id) {\n    return;\n  }\n  if (clientChainId === viem_chains__WEBPACK_IMPORTED_MODULE_2__.baseSepolia.id) {\n    return;\n  }\n  throw new Error(\n    \"Client network needs to be base or baseSepolia for current coin deployments.\"\n  );\n};\n\n// src/metadata/cleanAndValidateMetadataURI.ts\nfunction cleanAndValidateMetadataURI(uri) {\n  if (uri.startsWith(\"ipfs://\")) {\n    return uri.replace(\n      \"ipfs://\",\n      \"https://magic.decentralized-content.com/ipfs/\"\n    );\n  }\n  if (uri.startsWith(\"ar://\")) {\n    return uri.replace(\"ar://\", \"http://arweave.net/\");\n  }\n  if (uri.startsWith(\"data:\")) {\n    return uri;\n  }\n  if (uri.startsWith(\"http://\") || uri.startsWith(\"https://\")) {\n    return uri;\n  }\n  throw new Error(\"Invalid metadata URI\");\n}\n\n// src/metadata/validateMetadataJSON.ts\nfunction validateURIString(uri) {\n  if (typeof uri !== \"string\") {\n    throw new Error(\"URI must be a string\");\n  }\n  if (uri.startsWith(\"ipfs://\")) {\n    return true;\n  }\n  if (uri.startsWith(\"ar://\")) {\n    return true;\n  }\n  if (uri.startsWith(\"https://\")) {\n    return true;\n  }\n  if (uri.startsWith(\"data:\")) {\n    return true;\n  }\n  return false;\n}\nfunction validateMetadataJSON(metadata) {\n  if (typeof metadata !== \"object\" || !metadata) {\n    throw new Error(\"Metadata must be an object and exist\");\n  }\n  if (typeof metadata.name !== \"string\") {\n    throw new Error(\"Metadata name is required and must be a string\");\n  }\n  if (typeof metadata.description !== \"string\") {\n    throw new Error(\"Metadata description is required and must be a string\");\n  }\n  if (typeof metadata.image === \"string\") {\n    if (!validateURIString(metadata.image)) {\n      throw new Error(\"Metadata image is not a valid URI\");\n    }\n  } else {\n    throw new Error(\"Metadata image is required and must be a string\");\n  }\n  if (\"animation_url\" in metadata) {\n    if (typeof metadata.animation_url !== \"string\") {\n      throw new Error(\"Metadata animation_url, if provided, must be a string\");\n    }\n    if (!validateURIString(metadata.animation_url)) {\n      throw new Error(\"Metadata animation_url is not a valid URI\");\n    }\n  }\n  const content = \"content\" in metadata && metadata.content;\n  if (content) {\n    if (typeof content.uri !== \"string\") {\n      throw new Error(\"If provided, content.uri must be a string\");\n    }\n    if (!validateURIString(content.uri)) {\n      throw new Error(\"If provided, content.uri must be a valid URI string\");\n    }\n    if (typeof content.mime !== \"string\") {\n      throw new Error(\"If provided, content.mime must be a string\");\n    }\n  }\n  return true;\n}\n\n// src/metadata/validateMetadataURIContent.ts\nasync function validateMetadataURIContent(metadataURI) {\n  const cleanedURI = cleanAndValidateMetadataURI(metadataURI);\n  const response = await fetch(cleanedURI);\n  if (!response.ok) {\n    throw new Error(\"Metadata fetch failed\");\n  }\n  if (![\"application/json\", \"text/plain\"].includes(\n    response.headers.get(\"content-type\") ?? \"\"\n  )) {\n    throw new Error(\"Metadata is not a valid JSON or plain text response type\");\n  }\n  const metadataJson = await response.json();\n  return validateMetadataJSON(metadataJson);\n}\n\n// src/utils/attribution.ts\n\nfunction getAttribution() {\n  const hash = (0,viem__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,viem__WEBPACK_IMPORTED_MODULE_4__.toHex)(\"api-sdk.zora.engineering\"));\n  return (0,viem__WEBPACK_IMPORTED_MODULE_5__.slice)(hash, 0, 4);\n}\n\n// src/utils/poolConfigUtils.ts\n\n\n\nvar ZORA_DECIMALS = 18;\nvar ZORA_ADDRESS = \"0x1111111111166b7fe7bd91427724b487980afc69\";\nvar COIN_ETH_PAIR_LOWER_TICK = -25e4;\nvar COIN_ETH_PAIR_UPPER_TICK = -195e3;\nvar COIN_ETH_PAIR_NUM_DISCOVERY_POSITIONS = 11;\nvar COIN_ETH_PAIR_MAX_DISCOVERY_SUPPLY_SHARE = (0,viem__WEBPACK_IMPORTED_MODULE_6__.parseUnits)(\"0.05\", 18);\nvar COIN_ETH_PAIR_POOL_CONFIG = {\n  [viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id]: (0,_zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.encodeMultiCurvePoolConfig)({\n    currency: viem__WEBPACK_IMPORTED_MODULE_7__.zeroAddress,\n    tickLower: [COIN_ETH_PAIR_LOWER_TICK],\n    tickUpper: [COIN_ETH_PAIR_UPPER_TICK],\n    numDiscoveryPositions: [COIN_ETH_PAIR_NUM_DISCOVERY_POSITIONS],\n    maxDiscoverySupplyShare: [COIN_ETH_PAIR_MAX_DISCOVERY_SUPPLY_SHARE]\n  }),\n  [viem_chains__WEBPACK_IMPORTED_MODULE_2__.baseSepolia.id]: (0,_zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.encodeMultiCurvePoolConfig)({\n    currency: viem__WEBPACK_IMPORTED_MODULE_7__.zeroAddress,\n    tickLower: [COIN_ETH_PAIR_LOWER_TICK],\n    tickUpper: [COIN_ETH_PAIR_UPPER_TICK],\n    numDiscoveryPositions: [COIN_ETH_PAIR_NUM_DISCOVERY_POSITIONS],\n    maxDiscoverySupplyShare: [COIN_ETH_PAIR_MAX_DISCOVERY_SUPPLY_SHARE]\n  })\n};\nvar COIN_ZORA_PAIR_LOWER_TICK = -138e3;\nvar COIN_ZORA_PAIR_UPPER_TICK = -81e3;\nvar COIN_ZORA_PAIR_NUM_DISCOVERY_POSITIONS = 11;\nvar COIN_ZORA_PAIR_MAX_DISCOVERY_SUPPLY_SHARE = (0,viem__WEBPACK_IMPORTED_MODULE_6__.parseUnits)(\n  \"0.05\",\n  ZORA_DECIMALS\n);\nvar COIN_ZORA_PAIR_POOL_CONFIG = {\n  [viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id]: (0,_zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.encodeMultiCurvePoolConfig)({\n    currency: ZORA_ADDRESS,\n    tickLower: [COIN_ZORA_PAIR_LOWER_TICK],\n    tickUpper: [COIN_ZORA_PAIR_UPPER_TICK],\n    numDiscoveryPositions: [COIN_ZORA_PAIR_NUM_DISCOVERY_POSITIONS],\n    maxDiscoverySupplyShare: [COIN_ZORA_PAIR_MAX_DISCOVERY_SUPPLY_SHARE]\n  })\n};\n\n// src/utils/getPrepurchaseHook.ts\n\n\n\nvar BASE_UDSC_ADDRESS = \"0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913\";\nvar USDC_ZORA_FEE = 3e3;\nvar WETH_BASE_FEE = 3e3;\nvar encodeFee = (fee) => (0,viem__WEBPACK_IMPORTED_MODULE_8__.pad)((0,viem__WEBPACK_IMPORTED_MODULE_4__.toHex)(fee), { size: 3 });\nvar getPrepurchaseHook = async ({\n  payoutRecipient,\n  initialPurchase,\n  chainId\n}) => {\n  if (initialPurchase.currency !== 1 /* ETH */ && chainId !== viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id) {\n    throw new Error(\"Initial purchase currency and/or chain not supported\");\n  }\n  const path = (0,viem__WEBPACK_IMPORTED_MODULE_9__.concat)([\n    _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.wethAddress[viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id],\n    encodeFee(WETH_BASE_FEE),\n    BASE_UDSC_ADDRESS,\n    encodeFee(USDC_ZORA_FEE),\n    ZORA_ADDRESS\n  ]);\n  return (0,_zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.encodeBuySupplyWithMultiHopSwapRouterHookCall)({\n    ethValue: initialPurchase.amount,\n    buyRecipient: payoutRecipient,\n    exactInputParams: {\n      path,\n      amountIn: initialPurchase.amount,\n      amountOutMinimum: initialPurchase.amountOutMinimum || 0n\n    },\n    chainId: viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id\n  });\n};\n\n// src/utils/getChainFromId.ts\n\nfunction getChainFromId(chainId) {\n  if (chainId === viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id) {\n    return viem_chains__WEBPACK_IMPORTED_MODULE_1__.base;\n  }\n  if (chainId === viem_chains__WEBPACK_IMPORTED_MODULE_2__.baseSepolia.id) {\n    return viem_chains__WEBPACK_IMPORTED_MODULE_2__.baseSepolia;\n  }\n  throw new Error(`Chain ID ${chainId} not supported`);\n}\n\n// src/actions/createCoin.ts\nvar DeployCurrency = /* @__PURE__ */ ((DeployCurrency2) => {\n  DeployCurrency2[DeployCurrency2[\"ZORA\"] = 1] = \"ZORA\";\n  DeployCurrency2[DeployCurrency2[\"ETH\"] = 2] = \"ETH\";\n  return DeployCurrency2;\n})(DeployCurrency || {});\nvar InitialPurchaseCurrency = /* @__PURE__ */ ((InitialPurchaseCurrency2) => {\n  InitialPurchaseCurrency2[InitialPurchaseCurrency2[\"ETH\"] = 1] = \"ETH\";\n  return InitialPurchaseCurrency2;\n})(InitialPurchaseCurrency || {});\nfunction getPoolConfig(currency, chainId) {\n  if (currency === 1 /* ZORA */ && chainId == viem_chains__WEBPACK_IMPORTED_MODULE_2__.baseSepolia.id) {\n    throw new Error(\"ZORA is not supported on Base Sepolia\");\n  }\n  switch (currency) {\n    case 1 /* ZORA */:\n      return COIN_ZORA_PAIR_POOL_CONFIG[chainId];\n    case 2 /* ETH */:\n      return COIN_ETH_PAIR_POOL_CONFIG[chainId];\n    default:\n      throw new Error(\"Invalid currency\");\n  }\n}\nasync function createCoinCall({\n  name,\n  symbol,\n  uri,\n  owners,\n  payoutRecipient,\n  currency,\n  chainId = viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id,\n  platformReferrer = \"0x0000000000000000000000000000000000000000\",\n  initialPurchase\n}) {\n  if (!owners) {\n    owners = [payoutRecipient];\n  }\n  if (!currency) {\n    currency = chainId !== viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id ? 2 /* ETH */ : 1 /* ZORA */;\n  }\n  const poolConfig = getPoolConfig(currency, chainId);\n  await validateMetadataURIContent(uri);\n  let deployHook = {\n    hook: viem__WEBPACK_IMPORTED_MODULE_7__.zeroAddress,\n    hookData: \"0x\",\n    value: 0n\n  };\n  if (initialPurchase) {\n    deployHook = await getPrepurchaseHook({\n      initialPurchase,\n      payoutRecipient,\n      chainId\n    });\n  }\n  return {\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinFactoryABI,\n    functionName: \"deploy\",\n    address: COIN_FACTORY_ADDRESS,\n    args: [\n      payoutRecipient,\n      owners,\n      uri,\n      name,\n      symbol,\n      poolConfig,\n      platformReferrer,\n      deployHook.hook,\n      deployHook.hookData,\n      (0,viem__WEBPACK_IMPORTED_MODULE_3__.keccak256)((0,viem__WEBPACK_IMPORTED_MODULE_10__.toBytes)(Math.random().toString()))\n      // coinSalt\n    ],\n    value: deployHook.value,\n    dataSuffix: getAttribution()\n  };\n}\nfunction getCoinCreateFromLogs(receipt) {\n  const eventLogs = (0,viem__WEBPACK_IMPORTED_MODULE_11__.parseEventLogs)({\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinFactoryABI,\n    logs: receipt.logs\n  });\n  return eventLogs.find((log) => log.eventName === \"CoinCreatedV4\")?.args;\n}\nasync function createCoin(call, walletClient, publicClient, options) {\n  validateClientNetwork(publicClient);\n  const createCoinRequest = await createCoinCall(call);\n  const { request } = await publicClient.simulateContract({\n    ...createCoinRequest,\n    account: options?.account ?? walletClient.account\n  });\n  if (request.gas) {\n    request.gas = request.gas * BigInt(options?.gasMultiplier ?? 100) / 100n;\n  }\n  const hash = await walletClient.writeContract(request);\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n  const deployment = getCoinCreateFromLogs(receipt);\n  return {\n    hash,\n    receipt,\n    address: deployment?.coin,\n    deployment,\n    chain: getChainFromId(publicClient.chain.id)\n  };\n}\n\n// src/actions/getOnchainCoinDetails.ts\n\n\nasync function getOnchainCoinDetails({\n  coin,\n  user = viem__WEBPACK_IMPORTED_MODULE_7__.zeroAddress,\n  publicClient\n}) {\n  validateClientNetwork(publicClient);\n  const [balance, owners, payoutRecipient] = await publicClient.multicall({\n    contracts: [\n      {\n        address: coin,\n        abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI,\n        functionName: \"balanceOf\",\n        args: [user]\n      },\n      {\n        address: coin,\n        abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI,\n        functionName: \"owners\"\n      },\n      {\n        address: coin,\n        abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI,\n        functionName: \"payoutRecipient\"\n      }\n    ],\n    allowFailure: false\n  });\n  return {\n    balance,\n    owners,\n    payoutRecipient\n  };\n}\n\n// src/actions/updateCoinURI.ts\n\n\nfunction updateCoinURICall({\n  newURI,\n  coin\n}) {\n  if (!newURI.startsWith(\"ipfs://\")) {\n    throw new Error(\"URI needs to be an ipfs:// prefix uri\");\n  }\n  return {\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI,\n    address: coin,\n    functionName: \"setContractURI\",\n    args: [newURI],\n    dataSuffix: getAttribution()\n  };\n}\nasync function updateCoinURI(args, walletClient, publicClient) {\n  validateClientNetwork(publicClient);\n  const call = updateCoinURICall(args);\n  const { request } = await publicClient.simulateContract({\n    ...call,\n    account: walletClient.account\n  });\n  const hash = await walletClient.writeContract(request);\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n  const eventLogs = (0,viem__WEBPACK_IMPORTED_MODULE_11__.parseEventLogs)({ abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI, logs: receipt.logs });\n  const uriUpdated = eventLogs.find(\n    (log) => log.eventName === \"ContractURIUpdated\"\n  );\n  return { hash, receipt, uriUpdated };\n}\n\n// src/actions/updatePayoutRecipient.ts\n\n\nfunction updatePayoutRecipientCall({\n  newPayoutRecipient,\n  coin\n}) {\n  return {\n    abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI,\n    address: coin,\n    functionName: \"setPayoutRecipient\",\n    args: [newPayoutRecipient],\n    dataSuffix: getAttribution()\n  };\n}\nasync function updatePayoutRecipient(args, walletClient, publicClient) {\n  validateClientNetwork(publicClient);\n  const call = updatePayoutRecipientCall(args);\n  const { request } = await publicClient.simulateContract({\n    ...call,\n    account: walletClient.account\n  });\n  const hash = await walletClient.writeContract(request);\n  const receipt = await publicClient.waitForTransactionReceipt({ hash });\n  const eventLogs = (0,viem__WEBPACK_IMPORTED_MODULE_11__.parseEventLogs)({ abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.coinABI, logs: receipt.logs });\n  const payoutRecipientUpdated = eventLogs.find(\n    (log) => log.eventName === \"CoinPayoutRecipientUpdated\"\n  );\n  return { hash, receipt, payoutRecipientUpdated };\n}\n\n// src/actions/tradeCoin.ts\n\n\n\n\n// src/client/client.gen.ts\n\nvar client = (0,_hey_api_client_fetch__WEBPACK_IMPORTED_MODULE_12__.createClient)(\n  (0,_hey_api_client_fetch__WEBPACK_IMPORTED_MODULE_12__.createConfig)({\n    baseUrl: \"https://api-sdk.zora.engineering/\"\n  })\n);\n\n// src/client/sdk.gen.ts\nvar getCoin = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coin\",\n    ...options\n  });\n};\nvar getCoinComments = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coinComments\",\n    ...options\n  });\n};\nvar getCoinHolders = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coinHolders\",\n    ...options\n  });\n};\nvar getCoinSwaps = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coinSwaps\",\n    ...options\n  });\n};\nvar getCoins = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/coins\",\n    ...options\n  });\n};\nvar setCreateUploadJwt = (options) => {\n  return (options?.client ?? client).post({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/createUploadJWT\",\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers\n    }\n  });\n};\nvar getExplore = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/explore\",\n    ...options\n  });\n};\nvar getProfile = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/profile\",\n    ...options\n  });\n};\nvar getProfileBalances = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/profileBalances\",\n    ...options\n  });\n};\nvar getProfileCoins = (options) => {\n  return (options.client ?? client).get({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/profileCoins\",\n    ...options\n  });\n};\nvar postQuote = (options) => {\n  return (options?.client ?? client).post({\n    security: [\n      {\n        name: \"api-key\",\n        type: \"apiKey\"\n      }\n    ],\n    url: \"/quote\",\n    ...options,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...options?.headers\n    }\n  });\n};\n\n// src/actions/tradeCoin.ts\nfunction convertBigIntToString(permit) {\n  return {\n    ...permit,\n    details: {\n      ...permit.details,\n      amount: `${permit.details.amount}`\n    },\n    sigDeadline: `${permit.sigDeadline}`\n  };\n}\nvar PERMIT_SINGLE_TYPES = {\n  PermitSingle: [\n    { name: \"details\", type: \"PermitDetails\" },\n    { name: \"spender\", type: \"address\" },\n    { name: \"sigDeadline\", type: \"uint256\" }\n  ],\n  PermitDetails: [\n    { name: \"token\", type: \"address\" },\n    { name: \"amount\", type: \"uint160\" },\n    { name: \"expiration\", type: \"uint48\" },\n    { name: \"nonce\", type: \"uint48\" }\n  ]\n};\nasync function tradeCoin({\n  tradeParameters,\n  walletClient,\n  account,\n  publicClient,\n  validateTransaction = true\n}) {\n  const quote = await createTradeCall(tradeParameters);\n  if (!account) {\n    account = walletClient.account;\n  }\n  if (!account) {\n    throw new Error(\"Account is required\");\n  }\n  if (!tradeParameters.recipient) {\n    tradeParameters.recipient = typeof account === \"string\" ? account : account.address;\n  }\n  const signatures = [];\n  if (quote.permits) {\n    for (const permit of quote.permits) {\n      const [, , nonce] = await publicClient.readContract({\n        abi: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.permit2ABI,\n        address: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id],\n        functionName: \"allowance\",\n        args: [\n          permit.permit.details.token,\n          typeof account === \"string\" ? account : account.address,\n          permit.permit.spender\n        ]\n      });\n      const permitToken = permit.permit.details.token;\n      const allowance = await publicClient.readContract({\n        abi: viem__WEBPACK_IMPORTED_MODULE_13__.erc20Abi,\n        address: permitToken,\n        functionName: \"allowance\",\n        args: [\n          typeof account === \"string\" ? account : account.address,\n          _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id]\n        ]\n      });\n      if (allowance < BigInt(permit.permit.details.amount)) {\n        const approvalTx = await walletClient.writeContract({\n          abi: viem__WEBPACK_IMPORTED_MODULE_13__.erc20Abi,\n          address: permitToken,\n          functionName: \"approve\",\n          chain: viem_chains__WEBPACK_IMPORTED_MODULE_1__.base,\n          args: [_zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id], viem__WEBPACK_IMPORTED_MODULE_14__.maxUint256],\n          account\n        });\n        await publicClient.waitForTransactionReceipt({\n          hash: approvalTx\n        });\n      }\n      const message = {\n        details: {\n          token: permit.permit.details.token,\n          amount: BigInt(permit.permit.details.amount),\n          expiration: Number(permit.permit.details.expiration),\n          nonce\n        },\n        spender: permit.permit.spender,\n        sigDeadline: BigInt(permit.permit.sigDeadline)\n      };\n      const signature = await walletClient.signTypedData({\n        domain: {\n          name: \"Permit2\",\n          chainId: viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id,\n          verifyingContract: _zoralabs_protocol_deployments__WEBPACK_IMPORTED_MODULE_0__.permit2Address[viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id]\n        },\n        primaryType: \"PermitSingle\",\n        types: PERMIT_SINGLE_TYPES,\n        message,\n        account: typeof account === \"string\" ? account : account.address\n      });\n      signatures.push({\n        signature,\n        permit: convertBigIntToString(message)\n      });\n    }\n  }\n  const newQuote = await createTradeCall({\n    ...tradeParameters,\n    signatures\n  });\n  const call = {\n    to: newQuote.call.target,\n    data: newQuote.call.data,\n    value: BigInt(newQuote.call.value),\n    chain: viem_chains__WEBPACK_IMPORTED_MODULE_1__.base,\n    account\n  };\n  if (validateTransaction) {\n    await publicClient.call(call);\n  }\n  const gasEstimate = validateTransaction ? await publicClient.estimateGas(call) : 10000000n;\n  const gasPrice = await publicClient.getGasPrice();\n  const tx = await walletClient.sendTransaction({\n    ...call,\n    gasPrice,\n    gas: gasEstimate\n  });\n  const receipt = await publicClient.waitForTransactionReceipt({\n    hash: tx\n  });\n  return receipt;\n}\nasync function createTradeCall(tradeParameters) {\n  if (tradeParameters.slippage && tradeParameters.slippage > 1) {\n    throw new Error(\"Slippage must be less than 1, max 0.99\");\n  }\n  if (tradeParameters.amountIn === BigInt(0)) {\n    throw new Error(\"Amount in must be greater than 0\");\n  }\n  const quote = await postQuote({\n    body: {\n      tokenIn: tradeParameters.sell,\n      tokenOut: tradeParameters.buy,\n      amountIn: tradeParameters.amountIn.toString(),\n      slippage: tradeParameters.slippage,\n      chainId: viem_chains__WEBPACK_IMPORTED_MODULE_1__.base.id,\n      sender: tradeParameters.sender,\n      recipient: tradeParameters.recipient || tradeParameters.sender,\n      signatures: tradeParameters.signatures\n    }\n  });\n  if (!quote.data) {\n    console.error(quote);\n    throw new Error(\"Quote failed\");\n  }\n  return quote.data;\n}\n\n// src/api/api-key.ts\nvar apiKey;\nfunction setApiKey(key) {\n  apiKey = key;\n}\nfunction getApiKey() {\n  return apiKey;\n}\nfunction getApiKeyMeta() {\n  if (!apiKey) {\n    return {};\n  }\n  return {\n    headers: {\n      \"api-key\": apiKey\n    }\n  };\n}\n\n// src/api/queries.ts\nvar getCoin2 = async (query, options) => {\n  return await getCoin({\n    ...options,\n    query,\n    ...getApiKeyMeta()\n  });\n};\nvar getCoins2 = async (query, options) => {\n  return await getCoins({\n    query: {\n      coins: query.coins.map((coinData) => JSON.stringify(coinData))\n    },\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getCoinHolders2 = async (query, options) => {\n  return await getCoinHolders({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getCoinSwaps2 = async (query, options) => {\n  return await getCoinSwaps({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getCoinComments2 = async (query, options) => {\n  return await getCoinComments({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getProfile2 = async (query, options) => {\n  return await getProfile({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getProfileCoins2 = async (query, options) => {\n  return await getProfileCoins({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\nvar getProfileBalances2 = async (query, options) => {\n  return await getProfileBalances({\n    query,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\n\n// src/api/explore.ts\nvar createExploreQuery = (query, listType, options) => getExplore({\n  ...options,\n  query: { ...query, listType },\n  ...getApiKeyMeta()\n});\nvar getCoinsTopGainers = (query = {}, options) => createExploreQuery(query, \"TOP_GAINERS\", options);\nvar getCoinsTopVolume24h = (query = {}, options) => createExploreQuery(query, \"TOP_VOLUME_24H\", options);\nvar getCoinsMostValuable = (query = {}, options) => createExploreQuery(query, \"MOST_VALUABLE\", options);\nvar getCoinsNew = (query = {}, options) => createExploreQuery(query, \"NEW\", options);\nvar getCoinsLastTraded = (query = {}, options) => createExploreQuery(query, \"LAST_TRADED\", options);\nvar getCoinsLastTradedUnique = (query = {}, options) => createExploreQuery(query, \"LAST_TRADED_UNIQUE\", options);\nvar getCreatorCoins = (query = {}, options) => createExploreQuery(query, \"NEW_CREATORS\", options);\nvar getMostValuableCreatorCoins = (query = {}, options) => createExploreQuery(query, \"MOST_VALUABLE_CREATORS\", options);\n\n// src/uploader/metadata.ts\nfunction validateImageMimeType(mimeType) {\n  if (![\n    \"image/png\",\n    \"image/jpeg\",\n    \"image/jpg\",\n    \"image/gif\",\n    \"image/svg+xml\"\n  ].includes(mimeType)) {\n    throw new Error(\"Image must be a PNG, JPEG, JPG, GIF or SVG\");\n  }\n}\nfunction getURLFromUploadResult(uploadResult) {\n  return new URL(uploadResult.url);\n}\nvar CoinMetadataBuilder = class {\n  withName(name) {\n    this.name = name;\n    if (typeof name !== \"string\") {\n      throw new Error(\"Name must be a string\");\n    }\n    return this;\n  }\n  withSymbol(symbol) {\n    this.symbol = symbol;\n    if (typeof symbol !== \"string\") {\n      throw new Error(\"Symbol must be a string\");\n    }\n    return this;\n  }\n  withDescription(description) {\n    this.description = description;\n    if (typeof description !== \"string\") {\n      throw new Error(\"Description must be a string\");\n    }\n    return this;\n  }\n  withImage(image) {\n    if (this.imageURL) {\n      throw new Error(\"Image URL already set\");\n    }\n    if (!(image instanceof File)) {\n      throw new Error(\"Image must be a File\");\n    }\n    validateImageMimeType(image.type);\n    this.imageFile = image;\n    return this;\n  }\n  withImageURI(imageURI) {\n    if (this.imageFile) {\n      throw new Error(\"Image file already set\");\n    }\n    if (typeof imageURI !== \"string\") {\n      throw new Error(\"Image URI must be a string\");\n    }\n    const url = new URL(imageURI);\n    this.imageURL = url;\n    return this;\n  }\n  withProperties(properties) {\n    for (const [key, value] of Object.entries(properties)) {\n      if (typeof key !== \"string\") {\n        throw new Error(\"Property key must be a string\");\n      }\n      if (typeof value !== \"string\") {\n        throw new Error(\"Property value must be a string\");\n      }\n    }\n    if (!this.properties) {\n      this.properties = {};\n    }\n    this.properties = { ...this.properties, ...properties };\n    return this;\n  }\n  withMedia(media) {\n    if (this.mediaURL) {\n      throw new Error(\"Media URL already set\");\n    }\n    if (!(media instanceof File)) {\n      throw new Error(\"Media must be a File\");\n    }\n    this.mediaMimeType = media.type;\n    this.mediaFile = media;\n    return this;\n  }\n  withMediaURI(mediaURI, mediaMimeType) {\n    if (this.mediaFile) {\n      throw new Error(\"Media file already set\");\n    }\n    if (typeof mediaURI !== \"string\") {\n      throw new Error(\"Media URI must be a string\");\n    }\n    const url = new URL(mediaURI);\n    this.mediaURL = url;\n    this.mediaMimeType = mediaMimeType;\n    return this;\n  }\n  validate() {\n    if (!this.name) {\n      throw new Error(\"Name is required\");\n    }\n    if (!this.symbol) {\n      throw new Error(\"Symbol is required\");\n    }\n    if (!this.imageFile && !this.imageURL) {\n      throw new Error(\"Image is required\");\n    }\n    return this;\n  }\n  generateMetadata() {\n    return {\n      name: this.name,\n      symbol: this.symbol,\n      description: this.description,\n      image: this.imageURL.toString(),\n      animation_url: this.mediaURL?.toString(),\n      content: this.mediaURL ? {\n        uri: this.mediaURL?.toString(),\n        mime: this.mediaMimeType\n      } : void 0,\n      properties: this.properties\n    };\n  }\n  async upload(uploader) {\n    this.validate();\n    if (this.imageFile) {\n      const uploadResult2 = await uploader.upload(this.imageFile);\n      this.imageURL = getURLFromUploadResult(uploadResult2);\n    }\n    if (this.mediaFile) {\n      const uploadResult2 = await uploader.upload(this.mediaFile);\n      this.mediaURL = getURLFromUploadResult(uploadResult2);\n    }\n    const metadata = this.generateMetadata();\n    const uploadResult = await uploader.upload(\n      new File([JSON.stringify(metadata)], \"metadata.json\", {\n        type: \"application/json\"\n      })\n    );\n    return {\n      url: getURLFromUploadResult(uploadResult).toString(),\n      createMetadataParameters: {\n        name: this.name,\n        symbol: this.symbol,\n        uri: uploadResult.url\n      },\n      metadata\n    };\n  }\n};\nfunction createMetadataBuilder() {\n  return new CoinMetadataBuilder();\n}\n\n// src/api/internal.ts\nvar setCreateUploadJwt2 = async (body, options) => {\n  return await setCreateUploadJwt({\n    body,\n    ...getApiKeyMeta(),\n    ...options\n  });\n};\n\n// src/uploader/providers/zora.ts\nvar ZoraUploader = class {\n  constructor(creatorAddress) {\n    this.creatorAddress = creatorAddress;\n    if (!getApiKey()) {\n      throw new Error(\"API key is required for metadata interactions\");\n    }\n  }\n  async getJWTApiKey() {\n    if (this.jwtApiKey && this.jwtApiKeyExpiresAt && this.jwtApiKeyExpiresAt > Date.now()) {\n      return this.jwtApiKey;\n    }\n    this.jwtApiKeyExpiresAt = Date.now() + 1e3 * 60 * 60;\n    const response = await setCreateUploadJwt2({\n      creatorAddress: this.creatorAddress\n    });\n    this.jwtApiKey = response.data?.createUploadJwtFromApiKey;\n    if (!this.jwtApiKey) {\n      throw new Error(\"Failed to create upload JWT\");\n    }\n    return this.jwtApiKey;\n  }\n  async upload(file) {\n    const jwtApiKey = await this.getJWTApiKey();\n    const formData = new FormData();\n    formData.append(\"file\", file, file.name);\n    const response = await fetch(\n      \"https://ipfs-uploader.zora.co/api/v0/add?cid-version=1\",\n      {\n        method: \"POST\",\n        headers: {\n          Authorization: `Bearer ${jwtApiKey}`,\n          Accept: \"*/*\"\n        },\n        body: formData\n      }\n    );\n    if (!response.ok) {\n      console.error(await response.text());\n      throw new Error(`Failed to upload file: ${response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      url: `ipfs://${data.cid}`,\n      size: data.size,\n      mimeType: data.mimeType\n    };\n  }\n};\nfunction createZoraUploaderForCreator(creatorAddress) {\n  return new ZoraUploader(creatorAddress);\n}\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6b3JhbGFicytjb2lucy1zZGtAMC4yLjExX2FiaXR5cGVAMS4wLjhfdHlwZXNjcmlwdEA1LjguM196b2RAMy4yNS43Nl9fdmllbUAyLjMzLjNfYnVmZmVydXRpbF9ueXVvcnpjcHJqejRvcHdidWdhZTZseW15cS9ub2RlX21vZHVsZXMvQHpvcmFsYWJzL2NvaW5zLXNkay9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDc0Y7QUFNeEU7QUFDMkQ7O0FBRXpFO0FBQzhGO0FBQzNEO0FBQ25DLDJCQUEyQiw4RUFBc0I7QUFDakQ7QUFDQSxHQUFHLDZDQUFJO0FBQ1A7O0FBRUE7QUFDeUQ7QUFDekQ7QUFDQTtBQUNBLHdCQUF3Qiw2Q0FBSztBQUM3QjtBQUNBO0FBQ0Esd0JBQXdCLG9EQUFXO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUMrQztBQUMvQztBQUNBLGVBQWUsK0NBQVMsQ0FBQywyQ0FBSztBQUM5QixTQUFTLDJDQUFLO0FBQ2Q7O0FBRUE7QUFDNEU7QUFDN0I7QUFDMEI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxnREFBVTtBQUN6RDtBQUNBLEdBQUcsNkNBQUssTUFBTSwwRkFBMEI7QUFDeEMsY0FBYyw2Q0FBVztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHLG9EQUFZLE1BQU0sMEZBQTBCO0FBQy9DLGNBQWMsNkNBQVc7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsZ0RBQVU7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLDZDQUFLLE1BQU0sMEZBQTBCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFJd0M7QUFDWTtBQUNSO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix5Q0FBRyxDQUFDLDJDQUFNLFNBQVMsU0FBUztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw4REFBOEQsNkNBQUs7QUFDbkU7QUFDQTtBQUNBLGVBQWUsNENBQU07QUFDckIsSUFBSSx1RUFBVyxDQUFDLDZDQUFLO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLDZHQUE2QztBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsYUFBYSw2Q0FBSztBQUNsQixHQUFHO0FBQ0g7O0FBRUE7QUFDeUU7QUFDekU7QUFDQSxrQkFBa0IsNkNBQUs7QUFDdkIsV0FBVyw2Q0FBSztBQUNoQjtBQUNBLGtCQUFrQixvREFBWTtBQUM5QixXQUFXLG9EQUFZO0FBQ3ZCO0FBQ0EsOEJBQThCLFNBQVM7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLENBQUMsK0JBQStCO0FBQ2hDO0FBQ0EsOENBQThDLG9EQUFZO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNkNBQUs7QUFDakI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiw2Q0FBSztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsNkNBQVk7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsU0FBUywwRUFBa0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwrQ0FBVSxDQUFDLDhDQUFPO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHFEQUFjO0FBQ2xDLFNBQVMsMEVBQWtCO0FBQzNCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFVBQVU7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxNQUFNO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUN5RDtBQUNOO0FBQ25EO0FBQ0E7QUFDQSxTQUFTLDZDQUFZO0FBQ3JCO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1FQUFPO0FBQ3BCO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGFBQWEsbUVBQU87QUFDcEI7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLGFBQWEsbUVBQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ3FFO0FBR3ZEO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxtRUFBUTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLFVBQVU7QUFDcEI7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGlFQUFpRSxNQUFNO0FBQ3ZFLG9CQUFvQixxREFBZSxHQUFHLEtBQUssbUVBQVEsc0JBQXNCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNxRTtBQUd2RDtBQUNkO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLFNBQVMsbUVBQVE7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxVQUFVO0FBQ3BCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxpRUFBaUUsTUFBTTtBQUN2RSxvQkFBb0IscURBQWUsR0FBRyxLQUFLLG1FQUFRLHNCQUFzQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDNEU7QUFJOUQ7QUFDOEI7O0FBRTVDO0FBSStCO0FBQy9CLGFBQWEsb0VBQVk7QUFDekIsRUFBRSxvRUFBWTtBQUNkO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHNCQUFzQjtBQUN2QyxLQUFLO0FBQ0wsb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sd0NBQXdDO0FBQzlDLE1BQU0sa0NBQWtDO0FBQ3hDLE1BQU07QUFDTjtBQUNBO0FBQ0EsTUFBTSxnQ0FBZ0M7QUFDdEMsTUFBTSxpQ0FBaUM7QUFDdkMsTUFBTSxvQ0FBb0M7QUFDMUMsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsc0VBQVU7QUFDdkIsaUJBQWlCLDBFQUFjLENBQUMsNkNBQUs7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxhQUFhLDJDQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSwwRUFBYyxDQUFDLDZDQUFLO0FBQzlCO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxlQUFlLDJDQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxpQkFBaUIsNkNBQUs7QUFDdEIsaUJBQWlCLDBFQUFjLENBQUMsNkNBQUssTUFBTSw2Q0FBVTtBQUNyRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2Q0FBSztBQUN4Qiw2QkFBNkIsMEVBQWMsQ0FBQyw2Q0FBSztBQUNqRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLDZDQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZDQUFLO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBLENBQUM7QUFDRCxvQ0FBb0M7QUFDcEMsc0NBQXNDO0FBQ3RDLHNDQUFzQztBQUN0Qyw2QkFBNkI7QUFDN0Isb0NBQW9DO0FBQ3BDLDBDQUEwQztBQUMxQyxpQ0FBaUM7QUFDakMsNkNBQTZDOztBQUU3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxVQUFVO0FBQzdDO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Qsb0JBQW9CO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUF3Q0U7QUFDRiIsInNvdXJjZXMiOlsiL3dvcmtzcGFjZXMvem9yYS1wcm90b2NvbC9ub2RlX21vZHVsZXMvLnBucG0vQHpvcmFsYWJzK2NvaW5zLXNka0AwLjIuMTFfYWJpdHlwZUAxLjAuOF90eXBlc2NyaXB0QDUuOC4zX3pvZEAzLjI1Ljc2X192aWVtQDIuMzMuM19idWZmZXJ1dGlsX255dW9yemNwcmp6NG9wd2J1Z2FlNmx5bXlxL25vZGVfbW9kdWxlcy9Aem9yYWxhYnMvY29pbnMtc2RrL2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2FjdGlvbnMvY3JlYXRlQ29pbi50c1xuaW1wb3J0IHsgY29pbkZhY3RvcnlBQkkgYXMgem9yYUZhY3RvcnlJbXBsQUJJIH0gZnJvbSBcIkB6b3JhbGFicy9wcm90b2NvbC1kZXBsb3ltZW50c1wiO1xuaW1wb3J0IHtcbiAgcGFyc2VFdmVudExvZ3MsXG4gIHplcm9BZGRyZXNzIGFzIHplcm9BZGRyZXNzMixcbiAga2VjY2FrMjU2IGFzIGtlY2NhazI1NjIsXG4gIHRvQnl0ZXNcbn0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IGJhc2UgYXMgYmFzZTYsIGJhc2VTZXBvbGlhIGFzIGJhc2VTZXBvbGlhNCB9IGZyb20gXCJ2aWVtL2NoYWluc1wiO1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG5pbXBvcnQgeyBjb2luRmFjdG9yeUFkZHJlc3MgYXMgem9yYUZhY3RvcnlJbXBsQWRkcmVzcyB9IGZyb20gXCJAem9yYWxhYnMvcHJvdG9jb2wtZGVwbG95bWVudHNcIjtcbmltcG9ydCB7IGJhc2UgfSBmcm9tIFwidmllbS9jaGFpbnNcIjtcbnZhciBDT0lOX0ZBQ1RPUllfQUREUkVTUyA9IHpvcmFGYWN0b3J5SW1wbEFkZHJlc3NbXCI4NDUzXCJdO1xudmFyIFVTRENfV0VUSF9QT09MU19CWV9DSEFJTiA9IHtcbiAgW2Jhc2UuaWRdOiBcIjB4ZDBiNTNEOTI3NzY0MmQ4OTlERjVDODdBMzk2NkEzNDlBNzk4RjIyNFwiXG59O1xuXG4vLyBzcmMvdXRpbHMvdmFsaWRhdGVDbGllbnROZXR3b3JrLnRzXG5pbXBvcnQgeyBiYXNlIGFzIGJhc2UyLCBiYXNlU2Vwb2xpYSB9IGZyb20gXCJ2aWVtL2NoYWluc1wiO1xudmFyIHZhbGlkYXRlQ2xpZW50TmV0d29yayA9IChwdWJsaWNDbGllbnQpID0+IHtcbiAgY29uc3QgY2xpZW50Q2hhaW5JZCA9IHB1YmxpY0NsaWVudD8uY2hhaW4/LmlkO1xuICBpZiAoY2xpZW50Q2hhaW5JZCA9PT0gYmFzZTIuaWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGNsaWVudENoYWluSWQgPT09IGJhc2VTZXBvbGlhLmlkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICBcIkNsaWVudCBuZXR3b3JrIG5lZWRzIHRvIGJlIGJhc2Ugb3IgYmFzZVNlcG9saWEgZm9yIGN1cnJlbnQgY29pbiBkZXBsb3ltZW50cy5cIlxuICApO1xufTtcblxuLy8gc3JjL21ldGFkYXRhL2NsZWFuQW5kVmFsaWRhdGVNZXRhZGF0YVVSSS50c1xuZnVuY3Rpb24gY2xlYW5BbmRWYWxpZGF0ZU1ldGFkYXRhVVJJKHVyaSkge1xuICBpZiAodXJpLnN0YXJ0c1dpdGgoXCJpcGZzOi8vXCIpKSB7XG4gICAgcmV0dXJuIHVyaS5yZXBsYWNlKFxuICAgICAgXCJpcGZzOi8vXCIsXG4gICAgICBcImh0dHBzOi8vbWFnaWMuZGVjZW50cmFsaXplZC1jb250ZW50LmNvbS9pcGZzL1wiXG4gICAgKTtcbiAgfVxuICBpZiAodXJpLnN0YXJ0c1dpdGgoXCJhcjovL1wiKSkge1xuICAgIHJldHVybiB1cmkucmVwbGFjZShcImFyOi8vXCIsIFwiaHR0cDovL2Fyd2VhdmUubmV0L1wiKTtcbiAgfVxuICBpZiAodXJpLnN0YXJ0c1dpdGgoXCJkYXRhOlwiKSkge1xuICAgIHJldHVybiB1cmk7XG4gIH1cbiAgaWYgKHVyaS5zdGFydHNXaXRoKFwiaHR0cDovL1wiKSB8fCB1cmkuc3RhcnRzV2l0aChcImh0dHBzOi8vXCIpKSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG1ldGFkYXRhIFVSSVwiKTtcbn1cblxuLy8gc3JjL21ldGFkYXRhL3ZhbGlkYXRlTWV0YWRhdGFKU09OLnRzXG5mdW5jdGlvbiB2YWxpZGF0ZVVSSVN0cmluZyh1cmkpIHtcbiAgaWYgKHR5cGVvZiB1cmkgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJVUkkgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgfVxuICBpZiAodXJpLnN0YXJ0c1dpdGgoXCJpcGZzOi8vXCIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHVyaS5zdGFydHNXaXRoKFwiYXI6Ly9cIikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAodXJpLnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh1cmkuc3RhcnRzV2l0aChcImRhdGE6XCIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVNZXRhZGF0YUpTT04obWV0YWRhdGEpIHtcbiAgaWYgKHR5cGVvZiBtZXRhZGF0YSAhPT0gXCJvYmplY3RcIiB8fCAhbWV0YWRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBtdXN0IGJlIGFuIG9iamVjdCBhbmQgZXhpc3RcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBtZXRhZGF0YS5uYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0YWRhdGEgbmFtZSBpcyByZXF1aXJlZCBhbmQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgfVxuICBpZiAodHlwZW9mIG1ldGFkYXRhLmRlc2NyaXB0aW9uICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0YWRhdGEgZGVzY3JpcHRpb24gaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBtZXRhZGF0YS5pbWFnZSA9PT0gXCJzdHJpbmdcIikge1xuICAgIGlmICghdmFsaWRhdGVVUklTdHJpbmcobWV0YWRhdGEuaW1hZ2UpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBpbWFnZSBpcyBub3QgYSB2YWxpZCBVUklcIik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIGltYWdlIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICB9XG4gIGlmIChcImFuaW1hdGlvbl91cmxcIiBpbiBtZXRhZGF0YSkge1xuICAgIGlmICh0eXBlb2YgbWV0YWRhdGEuYW5pbWF0aW9uX3VybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0YWRhdGEgYW5pbWF0aW9uX3VybCwgaWYgcHJvdmlkZWQsIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgfVxuICAgIGlmICghdmFsaWRhdGVVUklTdHJpbmcobWV0YWRhdGEuYW5pbWF0aW9uX3VybCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIGFuaW1hdGlvbl91cmwgaXMgbm90IGEgdmFsaWQgVVJJXCIpO1xuICAgIH1cbiAgfVxuICBjb25zdCBjb250ZW50ID0gXCJjb250ZW50XCIgaW4gbWV0YWRhdGEgJiYgbWV0YWRhdGEuY29udGVudDtcbiAgaWYgKGNvbnRlbnQpIHtcbiAgICBpZiAodHlwZW9mIGNvbnRlbnQudXJpICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJZiBwcm92aWRlZCwgY29udGVudC51cmkgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICB9XG4gICAgaWYgKCF2YWxpZGF0ZVVSSVN0cmluZyhjb250ZW50LnVyaSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklmIHByb3ZpZGVkLCBjb250ZW50LnVyaSBtdXN0IGJlIGEgdmFsaWQgVVJJIHN0cmluZ1wiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb250ZW50Lm1pbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklmIHByb3ZpZGVkLCBjb250ZW50Lm1pbWUgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8vIHNyYy9tZXRhZGF0YS92YWxpZGF0ZU1ldGFkYXRhVVJJQ29udGVudC50c1xuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVNZXRhZGF0YVVSSUNvbnRlbnQobWV0YWRhdGFVUkkpIHtcbiAgY29uc3QgY2xlYW5lZFVSSSA9IGNsZWFuQW5kVmFsaWRhdGVNZXRhZGF0YVVSSShtZXRhZGF0YVVSSSk7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goY2xlYW5lZFVSSSk7XG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBmZXRjaCBmYWlsZWRcIik7XG4gIH1cbiAgaWYgKCFbXCJhcHBsaWNhdGlvbi9qc29uXCIsIFwidGV4dC9wbGFpblwiXS5pbmNsdWRlcyhcbiAgICByZXNwb25zZS5oZWFkZXJzLmdldChcImNvbnRlbnQtdHlwZVwiKSA/PyBcIlwiXG4gICkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRhZGF0YSBpcyBub3QgYSB2YWxpZCBKU09OIG9yIHBsYWluIHRleHQgcmVzcG9uc2UgdHlwZVwiKTtcbiAgfVxuICBjb25zdCBtZXRhZGF0YUpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gIHJldHVybiB2YWxpZGF0ZU1ldGFkYXRhSlNPTihtZXRhZGF0YUpzb24pO1xufVxuXG4vLyBzcmMvdXRpbHMvYXR0cmlidXRpb24udHNcbmltcG9ydCB7IGtlY2NhazI1Niwgc2xpY2UsIHRvSGV4IH0gZnJvbSBcInZpZW1cIjtcbmZ1bmN0aW9uIGdldEF0dHJpYnV0aW9uKCkge1xuICBjb25zdCBoYXNoID0ga2VjY2FrMjU2KHRvSGV4KFwiYXBpLXNkay56b3JhLmVuZ2luZWVyaW5nXCIpKTtcbiAgcmV0dXJuIHNsaWNlKGhhc2gsIDAsIDQpO1xufVxuXG4vLyBzcmMvdXRpbHMvcG9vbENvbmZpZ1V0aWxzLnRzXG5pbXBvcnQgeyBlbmNvZGVNdWx0aUN1cnZlUG9vbENvbmZpZyB9IGZyb20gXCJAem9yYWxhYnMvcHJvdG9jb2wtZGVwbG95bWVudHNcIjtcbmltcG9ydCB7IHBhcnNlVW5pdHMsIHplcm9BZGRyZXNzIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IGJhc2UgYXMgYmFzZTMsIGJhc2VTZXBvbGlhIGFzIGJhc2VTZXBvbGlhMiB9IGZyb20gXCJ2aWVtL2NoYWluc1wiO1xudmFyIFpPUkFfREVDSU1BTFMgPSAxODtcbnZhciBaT1JBX0FERFJFU1MgPSBcIjB4MTExMTExMTExMTE2NmI3ZmU3YmQ5MTQyNzcyNGI0ODc5ODBhZmM2OVwiO1xudmFyIENPSU5fRVRIX1BBSVJfTE9XRVJfVElDSyA9IC0yNWU0O1xudmFyIENPSU5fRVRIX1BBSVJfVVBQRVJfVElDSyA9IC0xOTVlMztcbnZhciBDT0lOX0VUSF9QQUlSX05VTV9ESVNDT1ZFUllfUE9TSVRJT05TID0gMTE7XG52YXIgQ09JTl9FVEhfUEFJUl9NQVhfRElTQ09WRVJZX1NVUFBMWV9TSEFSRSA9IHBhcnNlVW5pdHMoXCIwLjA1XCIsIDE4KTtcbnZhciBDT0lOX0VUSF9QQUlSX1BPT0xfQ09ORklHID0ge1xuICBbYmFzZTMuaWRdOiBlbmNvZGVNdWx0aUN1cnZlUG9vbENvbmZpZyh7XG4gICAgY3VycmVuY3k6IHplcm9BZGRyZXNzLFxuICAgIHRpY2tMb3dlcjogW0NPSU5fRVRIX1BBSVJfTE9XRVJfVElDS10sXG4gICAgdGlja1VwcGVyOiBbQ09JTl9FVEhfUEFJUl9VUFBFUl9USUNLXSxcbiAgICBudW1EaXNjb3ZlcnlQb3NpdGlvbnM6IFtDT0lOX0VUSF9QQUlSX05VTV9ESVNDT1ZFUllfUE9TSVRJT05TXSxcbiAgICBtYXhEaXNjb3ZlcnlTdXBwbHlTaGFyZTogW0NPSU5fRVRIX1BBSVJfTUFYX0RJU0NPVkVSWV9TVVBQTFlfU0hBUkVdXG4gIH0pLFxuICBbYmFzZVNlcG9saWEyLmlkXTogZW5jb2RlTXVsdGlDdXJ2ZVBvb2xDb25maWcoe1xuICAgIGN1cnJlbmN5OiB6ZXJvQWRkcmVzcyxcbiAgICB0aWNrTG93ZXI6IFtDT0lOX0VUSF9QQUlSX0xPV0VSX1RJQ0tdLFxuICAgIHRpY2tVcHBlcjogW0NPSU5fRVRIX1BBSVJfVVBQRVJfVElDS10sXG4gICAgbnVtRGlzY292ZXJ5UG9zaXRpb25zOiBbQ09JTl9FVEhfUEFJUl9OVU1fRElTQ09WRVJZX1BPU0lUSU9OU10sXG4gICAgbWF4RGlzY292ZXJ5U3VwcGx5U2hhcmU6IFtDT0lOX0VUSF9QQUlSX01BWF9ESVNDT1ZFUllfU1VQUExZX1NIQVJFXVxuICB9KVxufTtcbnZhciBDT0lOX1pPUkFfUEFJUl9MT1dFUl9USUNLID0gLTEzOGUzO1xudmFyIENPSU5fWk9SQV9QQUlSX1VQUEVSX1RJQ0sgPSAtODFlMztcbnZhciBDT0lOX1pPUkFfUEFJUl9OVU1fRElTQ09WRVJZX1BPU0lUSU9OUyA9IDExO1xudmFyIENPSU5fWk9SQV9QQUlSX01BWF9ESVNDT1ZFUllfU1VQUExZX1NIQVJFID0gcGFyc2VVbml0cyhcbiAgXCIwLjA1XCIsXG4gIFpPUkFfREVDSU1BTFNcbik7XG52YXIgQ09JTl9aT1JBX1BBSVJfUE9PTF9DT05GSUcgPSB7XG4gIFtiYXNlMy5pZF06IGVuY29kZU11bHRpQ3VydmVQb29sQ29uZmlnKHtcbiAgICBjdXJyZW5jeTogWk9SQV9BRERSRVNTLFxuICAgIHRpY2tMb3dlcjogW0NPSU5fWk9SQV9QQUlSX0xPV0VSX1RJQ0tdLFxuICAgIHRpY2tVcHBlcjogW0NPSU5fWk9SQV9QQUlSX1VQUEVSX1RJQ0tdLFxuICAgIG51bURpc2NvdmVyeVBvc2l0aW9uczogW0NPSU5fWk9SQV9QQUlSX05VTV9ESVNDT1ZFUllfUE9TSVRJT05TXSxcbiAgICBtYXhEaXNjb3ZlcnlTdXBwbHlTaGFyZTogW0NPSU5fWk9SQV9QQUlSX01BWF9ESVNDT1ZFUllfU1VQUExZX1NIQVJFXVxuICB9KVxufTtcblxuLy8gc3JjL3V0aWxzL2dldFByZXB1cmNoYXNlSG9vay50c1xuaW1wb3J0IHtcbiAgZW5jb2RlQnV5U3VwcGx5V2l0aE11bHRpSG9wU3dhcFJvdXRlckhvb2tDYWxsLFxuICB3ZXRoQWRkcmVzc1xufSBmcm9tIFwiQHpvcmFsYWJzL3Byb3RvY29sLWRlcGxveW1lbnRzXCI7XG5pbXBvcnQgeyBjb25jYXQsIHBhZCwgdG9IZXggYXMgdG9IZXgyIH0gZnJvbSBcInZpZW1cIjtcbmltcG9ydCB7IGJhc2UgYXMgYmFzZTQgfSBmcm9tIFwidmllbS9jaGFpbnNcIjtcbnZhciBCQVNFX1VEU0NfQUREUkVTUyA9IFwiMHg4MzM1ODlmQ0Q2ZURiNkUwOGY0YzdDMzJENGY3MWI1NGJkQTAyOTEzXCI7XG52YXIgVVNEQ19aT1JBX0ZFRSA9IDNlMztcbnZhciBXRVRIX0JBU0VfRkVFID0gM2UzO1xudmFyIGVuY29kZUZlZSA9IChmZWUpID0+IHBhZCh0b0hleDIoZmVlKSwgeyBzaXplOiAzIH0pO1xudmFyIGdldFByZXB1cmNoYXNlSG9vayA9IGFzeW5jICh7XG4gIHBheW91dFJlY2lwaWVudCxcbiAgaW5pdGlhbFB1cmNoYXNlLFxuICBjaGFpbklkXG59KSA9PiB7XG4gIGlmIChpbml0aWFsUHVyY2hhc2UuY3VycmVuY3kgIT09IDEgLyogRVRIICovICYmIGNoYWluSWQgIT09IGJhc2U0LmlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW5pdGlhbCBwdXJjaGFzZSBjdXJyZW5jeSBhbmQvb3IgY2hhaW4gbm90IHN1cHBvcnRlZFwiKTtcbiAgfVxuICBjb25zdCBwYXRoID0gY29uY2F0KFtcbiAgICB3ZXRoQWRkcmVzc1tiYXNlNC5pZF0sXG4gICAgZW5jb2RlRmVlKFdFVEhfQkFTRV9GRUUpLFxuICAgIEJBU0VfVURTQ19BRERSRVNTLFxuICAgIGVuY29kZUZlZShVU0RDX1pPUkFfRkVFKSxcbiAgICBaT1JBX0FERFJFU1NcbiAgXSk7XG4gIHJldHVybiBlbmNvZGVCdXlTdXBwbHlXaXRoTXVsdGlIb3BTd2FwUm91dGVySG9va0NhbGwoe1xuICAgIGV0aFZhbHVlOiBpbml0aWFsUHVyY2hhc2UuYW1vdW50LFxuICAgIGJ1eVJlY2lwaWVudDogcGF5b3V0UmVjaXBpZW50LFxuICAgIGV4YWN0SW5wdXRQYXJhbXM6IHtcbiAgICAgIHBhdGgsXG4gICAgICBhbW91bnRJbjogaW5pdGlhbFB1cmNoYXNlLmFtb3VudCxcbiAgICAgIGFtb3VudE91dE1pbmltdW06IGluaXRpYWxQdXJjaGFzZS5hbW91bnRPdXRNaW5pbXVtIHx8IDBuXG4gICAgfSxcbiAgICBjaGFpbklkOiBiYXNlNC5pZFxuICB9KTtcbn07XG5cbi8vIHNyYy91dGlscy9nZXRDaGFpbkZyb21JZC50c1xuaW1wb3J0IHsgYmFzZSBhcyBiYXNlNSwgYmFzZVNlcG9saWEgYXMgYmFzZVNlcG9saWEzIH0gZnJvbSBcInZpZW0vY2hhaW5zXCI7XG5mdW5jdGlvbiBnZXRDaGFpbkZyb21JZChjaGFpbklkKSB7XG4gIGlmIChjaGFpbklkID09PSBiYXNlNS5pZCkge1xuICAgIHJldHVybiBiYXNlNTtcbiAgfVxuICBpZiAoY2hhaW5JZCA9PT0gYmFzZVNlcG9saWEzLmlkKSB7XG4gICAgcmV0dXJuIGJhc2VTZXBvbGlhMztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYENoYWluIElEICR7Y2hhaW5JZH0gbm90IHN1cHBvcnRlZGApO1xufVxuXG4vLyBzcmMvYWN0aW9ucy9jcmVhdGVDb2luLnRzXG52YXIgRGVwbG95Q3VycmVuY3kgPSAvKiBAX19QVVJFX18gKi8gKChEZXBsb3lDdXJyZW5jeTIpID0+IHtcbiAgRGVwbG95Q3VycmVuY3kyW0RlcGxveUN1cnJlbmN5MltcIlpPUkFcIl0gPSAxXSA9IFwiWk9SQVwiO1xuICBEZXBsb3lDdXJyZW5jeTJbRGVwbG95Q3VycmVuY3kyW1wiRVRIXCJdID0gMl0gPSBcIkVUSFwiO1xuICByZXR1cm4gRGVwbG95Q3VycmVuY3kyO1xufSkoRGVwbG95Q3VycmVuY3kgfHwge30pO1xudmFyIEluaXRpYWxQdXJjaGFzZUN1cnJlbmN5ID0gLyogQF9fUFVSRV9fICovICgoSW5pdGlhbFB1cmNoYXNlQ3VycmVuY3kyKSA9PiB7XG4gIEluaXRpYWxQdXJjaGFzZUN1cnJlbmN5MltJbml0aWFsUHVyY2hhc2VDdXJyZW5jeTJbXCJFVEhcIl0gPSAxXSA9IFwiRVRIXCI7XG4gIHJldHVybiBJbml0aWFsUHVyY2hhc2VDdXJyZW5jeTI7XG59KShJbml0aWFsUHVyY2hhc2VDdXJyZW5jeSB8fCB7fSk7XG5mdW5jdGlvbiBnZXRQb29sQ29uZmlnKGN1cnJlbmN5LCBjaGFpbklkKSB7XG4gIGlmIChjdXJyZW5jeSA9PT0gMSAvKiBaT1JBICovICYmIGNoYWluSWQgPT0gYmFzZVNlcG9saWE0LmlkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiWk9SQSBpcyBub3Qgc3VwcG9ydGVkIG9uIEJhc2UgU2Vwb2xpYVwiKTtcbiAgfVxuICBzd2l0Y2ggKGN1cnJlbmN5KSB7XG4gICAgY2FzZSAxIC8qIFpPUkEgKi86XG4gICAgICByZXR1cm4gQ09JTl9aT1JBX1BBSVJfUE9PTF9DT05GSUdbY2hhaW5JZF07XG4gICAgY2FzZSAyIC8qIEVUSCAqLzpcbiAgICAgIHJldHVybiBDT0lOX0VUSF9QQUlSX1BPT0xfQ09ORklHW2NoYWluSWRdO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGN1cnJlbmN5XCIpO1xuICB9XG59XG5hc3luYyBmdW5jdGlvbiBjcmVhdGVDb2luQ2FsbCh7XG4gIG5hbWUsXG4gIHN5bWJvbCxcbiAgdXJpLFxuICBvd25lcnMsXG4gIHBheW91dFJlY2lwaWVudCxcbiAgY3VycmVuY3ksXG4gIGNoYWluSWQgPSBiYXNlNi5pZCxcbiAgcGxhdGZvcm1SZWZlcnJlciA9IFwiMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwXCIsXG4gIGluaXRpYWxQdXJjaGFzZVxufSkge1xuICBpZiAoIW93bmVycykge1xuICAgIG93bmVycyA9IFtwYXlvdXRSZWNpcGllbnRdO1xuICB9XG4gIGlmICghY3VycmVuY3kpIHtcbiAgICBjdXJyZW5jeSA9IGNoYWluSWQgIT09IGJhc2U2LmlkID8gMiAvKiBFVEggKi8gOiAxIC8qIFpPUkEgKi87XG4gIH1cbiAgY29uc3QgcG9vbENvbmZpZyA9IGdldFBvb2xDb25maWcoY3VycmVuY3ksIGNoYWluSWQpO1xuICBhd2FpdCB2YWxpZGF0ZU1ldGFkYXRhVVJJQ29udGVudCh1cmkpO1xuICBsZXQgZGVwbG95SG9vayA9IHtcbiAgICBob29rOiB6ZXJvQWRkcmVzczIsXG4gICAgaG9va0RhdGE6IFwiMHhcIixcbiAgICB2YWx1ZTogMG5cbiAgfTtcbiAgaWYgKGluaXRpYWxQdXJjaGFzZSkge1xuICAgIGRlcGxveUhvb2sgPSBhd2FpdCBnZXRQcmVwdXJjaGFzZUhvb2soe1xuICAgICAgaW5pdGlhbFB1cmNoYXNlLFxuICAgICAgcGF5b3V0UmVjaXBpZW50LFxuICAgICAgY2hhaW5JZFxuICAgIH0pO1xuICB9XG4gIHJldHVybiB7XG4gICAgYWJpOiB6b3JhRmFjdG9yeUltcGxBQkksXG4gICAgZnVuY3Rpb25OYW1lOiBcImRlcGxveVwiLFxuICAgIGFkZHJlc3M6IENPSU5fRkFDVE9SWV9BRERSRVNTLFxuICAgIGFyZ3M6IFtcbiAgICAgIHBheW91dFJlY2lwaWVudCxcbiAgICAgIG93bmVycyxcbiAgICAgIHVyaSxcbiAgICAgIG5hbWUsXG4gICAgICBzeW1ib2wsXG4gICAgICBwb29sQ29uZmlnLFxuICAgICAgcGxhdGZvcm1SZWZlcnJlcixcbiAgICAgIGRlcGxveUhvb2suaG9vayxcbiAgICAgIGRlcGxveUhvb2suaG9va0RhdGEsXG4gICAgICBrZWNjYWsyNTYyKHRvQnl0ZXMoTWF0aC5yYW5kb20oKS50b1N0cmluZygpKSlcbiAgICAgIC8vIGNvaW5TYWx0XG4gICAgXSxcbiAgICB2YWx1ZTogZGVwbG95SG9vay52YWx1ZSxcbiAgICBkYXRhU3VmZml4OiBnZXRBdHRyaWJ1dGlvbigpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRDb2luQ3JlYXRlRnJvbUxvZ3MocmVjZWlwdCkge1xuICBjb25zdCBldmVudExvZ3MgPSBwYXJzZUV2ZW50TG9ncyh7XG4gICAgYWJpOiB6b3JhRmFjdG9yeUltcGxBQkksXG4gICAgbG9nczogcmVjZWlwdC5sb2dzXG4gIH0pO1xuICByZXR1cm4gZXZlbnRMb2dzLmZpbmQoKGxvZykgPT4gbG9nLmV2ZW50TmFtZSA9PT0gXCJDb2luQ3JlYXRlZFY0XCIpPy5hcmdzO1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlQ29pbihjYWxsLCB3YWxsZXRDbGllbnQsIHB1YmxpY0NsaWVudCwgb3B0aW9ucykge1xuICB2YWxpZGF0ZUNsaWVudE5ldHdvcmsocHVibGljQ2xpZW50KTtcbiAgY29uc3QgY3JlYXRlQ29pblJlcXVlc3QgPSBhd2FpdCBjcmVhdGVDb2luQ2FsbChjYWxsKTtcbiAgY29uc3QgeyByZXF1ZXN0IH0gPSBhd2FpdCBwdWJsaWNDbGllbnQuc2ltdWxhdGVDb250cmFjdCh7XG4gICAgLi4uY3JlYXRlQ29pblJlcXVlc3QsXG4gICAgYWNjb3VudDogb3B0aW9ucz8uYWNjb3VudCA/PyB3YWxsZXRDbGllbnQuYWNjb3VudFxuICB9KTtcbiAgaWYgKHJlcXVlc3QuZ2FzKSB7XG4gICAgcmVxdWVzdC5nYXMgPSByZXF1ZXN0LmdhcyAqIEJpZ0ludChvcHRpb25zPy5nYXNNdWx0aXBsaWVyID8/IDEwMCkgLyAxMDBuO1xuICB9XG4gIGNvbnN0IGhhc2ggPSBhd2FpdCB3YWxsZXRDbGllbnQud3JpdGVDb250cmFjdChyZXF1ZXN0KTtcbiAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHB1YmxpY0NsaWVudC53YWl0Rm9yVHJhbnNhY3Rpb25SZWNlaXB0KHsgaGFzaCB9KTtcbiAgY29uc3QgZGVwbG95bWVudCA9IGdldENvaW5DcmVhdGVGcm9tTG9ncyhyZWNlaXB0KTtcbiAgcmV0dXJuIHtcbiAgICBoYXNoLFxuICAgIHJlY2VpcHQsXG4gICAgYWRkcmVzczogZGVwbG95bWVudD8uY29pbixcbiAgICBkZXBsb3ltZW50LFxuICAgIGNoYWluOiBnZXRDaGFpbkZyb21JZChwdWJsaWNDbGllbnQuY2hhaW4uaWQpXG4gIH07XG59XG5cbi8vIHNyYy9hY3Rpb25zL2dldE9uY2hhaW5Db2luRGV0YWlscy50c1xuaW1wb3J0IHsgY29pbkFCSSB9IGZyb20gXCJAem9yYWxhYnMvcHJvdG9jb2wtZGVwbG95bWVudHNcIjtcbmltcG9ydCB7IHplcm9BZGRyZXNzIGFzIHplcm9BZGRyZXNzMyB9IGZyb20gXCJ2aWVtXCI7XG5hc3luYyBmdW5jdGlvbiBnZXRPbmNoYWluQ29pbkRldGFpbHMoe1xuICBjb2luLFxuICB1c2VyID0gemVyb0FkZHJlc3MzLFxuICBwdWJsaWNDbGllbnRcbn0pIHtcbiAgdmFsaWRhdGVDbGllbnROZXR3b3JrKHB1YmxpY0NsaWVudCk7XG4gIGNvbnN0IFtiYWxhbmNlLCBvd25lcnMsIHBheW91dFJlY2lwaWVudF0gPSBhd2FpdCBwdWJsaWNDbGllbnQubXVsdGljYWxsKHtcbiAgICBjb250cmFjdHM6IFtcbiAgICAgIHtcbiAgICAgICAgYWRkcmVzczogY29pbixcbiAgICAgICAgYWJpOiBjb2luQUJJLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IFwiYmFsYW5jZU9mXCIsXG4gICAgICAgIGFyZ3M6IFt1c2VyXVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYWRkcmVzczogY29pbixcbiAgICAgICAgYWJpOiBjb2luQUJJLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IFwib3duZXJzXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGFkZHJlc3M6IGNvaW4sXG4gICAgICAgIGFiaTogY29pbkFCSSxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiBcInBheW91dFJlY2lwaWVudFwiXG4gICAgICB9XG4gICAgXSxcbiAgICBhbGxvd0ZhaWx1cmU6IGZhbHNlXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGJhbGFuY2UsXG4gICAgb3duZXJzLFxuICAgIHBheW91dFJlY2lwaWVudFxuICB9O1xufVxuXG4vLyBzcmMvYWN0aW9ucy91cGRhdGVDb2luVVJJLnRzXG5pbXBvcnQgeyBjb2luQUJJIGFzIGNvaW5BQkkyIH0gZnJvbSBcIkB6b3JhbGFicy9wcm90b2NvbC1kZXBsb3ltZW50c1wiO1xuaW1wb3J0IHtcbiAgcGFyc2VFdmVudExvZ3MgYXMgcGFyc2VFdmVudExvZ3MyXG59IGZyb20gXCJ2aWVtXCI7XG5mdW5jdGlvbiB1cGRhdGVDb2luVVJJQ2FsbCh7XG4gIG5ld1VSSSxcbiAgY29pblxufSkge1xuICBpZiAoIW5ld1VSSS5zdGFydHNXaXRoKFwiaXBmczovL1wiKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVSSSBuZWVkcyB0byBiZSBhbiBpcGZzOi8vIHByZWZpeCB1cmlcIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBhYmk6IGNvaW5BQkkyLFxuICAgIGFkZHJlc3M6IGNvaW4sXG4gICAgZnVuY3Rpb25OYW1lOiBcInNldENvbnRyYWN0VVJJXCIsXG4gICAgYXJnczogW25ld1VSSV0sXG4gICAgZGF0YVN1ZmZpeDogZ2V0QXR0cmlidXRpb24oKVxuICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gdXBkYXRlQ29pblVSSShhcmdzLCB3YWxsZXRDbGllbnQsIHB1YmxpY0NsaWVudCkge1xuICB2YWxpZGF0ZUNsaWVudE5ldHdvcmsocHVibGljQ2xpZW50KTtcbiAgY29uc3QgY2FsbCA9IHVwZGF0ZUNvaW5VUklDYWxsKGFyZ3MpO1xuICBjb25zdCB7IHJlcXVlc3QgfSA9IGF3YWl0IHB1YmxpY0NsaWVudC5zaW11bGF0ZUNvbnRyYWN0KHtcbiAgICAuLi5jYWxsLFxuICAgIGFjY291bnQ6IHdhbGxldENsaWVudC5hY2NvdW50XG4gIH0pO1xuICBjb25zdCBoYXNoID0gYXdhaXQgd2FsbGV0Q2xpZW50LndyaXRlQ29udHJhY3QocmVxdWVzdCk7XG4gIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCBwdWJsaWNDbGllbnQud2FpdEZvclRyYW5zYWN0aW9uUmVjZWlwdCh7IGhhc2ggfSk7XG4gIGNvbnN0IGV2ZW50TG9ncyA9IHBhcnNlRXZlbnRMb2dzMih7IGFiaTogY29pbkFCSTIsIGxvZ3M6IHJlY2VpcHQubG9ncyB9KTtcbiAgY29uc3QgdXJpVXBkYXRlZCA9IGV2ZW50TG9ncy5maW5kKFxuICAgIChsb2cpID0+IGxvZy5ldmVudE5hbWUgPT09IFwiQ29udHJhY3RVUklVcGRhdGVkXCJcbiAgKTtcbiAgcmV0dXJuIHsgaGFzaCwgcmVjZWlwdCwgdXJpVXBkYXRlZCB9O1xufVxuXG4vLyBzcmMvYWN0aW9ucy91cGRhdGVQYXlvdXRSZWNpcGllbnQudHNcbmltcG9ydCB7IGNvaW5BQkkgYXMgY29pbkFCSTMgfSBmcm9tIFwiQHpvcmFsYWJzL3Byb3RvY29sLWRlcGxveW1lbnRzXCI7XG5pbXBvcnQge1xuICBwYXJzZUV2ZW50TG9ncyBhcyBwYXJzZUV2ZW50TG9nczNcbn0gZnJvbSBcInZpZW1cIjtcbmZ1bmN0aW9uIHVwZGF0ZVBheW91dFJlY2lwaWVudENhbGwoe1xuICBuZXdQYXlvdXRSZWNpcGllbnQsXG4gIGNvaW5cbn0pIHtcbiAgcmV0dXJuIHtcbiAgICBhYmk6IGNvaW5BQkkzLFxuICAgIGFkZHJlc3M6IGNvaW4sXG4gICAgZnVuY3Rpb25OYW1lOiBcInNldFBheW91dFJlY2lwaWVudFwiLFxuICAgIGFyZ3M6IFtuZXdQYXlvdXRSZWNpcGllbnRdLFxuICAgIGRhdGFTdWZmaXg6IGdldEF0dHJpYnV0aW9uKClcbiAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBheW91dFJlY2lwaWVudChhcmdzLCB3YWxsZXRDbGllbnQsIHB1YmxpY0NsaWVudCkge1xuICB2YWxpZGF0ZUNsaWVudE5ldHdvcmsocHVibGljQ2xpZW50KTtcbiAgY29uc3QgY2FsbCA9IHVwZGF0ZVBheW91dFJlY2lwaWVudENhbGwoYXJncyk7XG4gIGNvbnN0IHsgcmVxdWVzdCB9ID0gYXdhaXQgcHVibGljQ2xpZW50LnNpbXVsYXRlQ29udHJhY3Qoe1xuICAgIC4uLmNhbGwsXG4gICAgYWNjb3VudDogd2FsbGV0Q2xpZW50LmFjY291bnRcbiAgfSk7XG4gIGNvbnN0IGhhc2ggPSBhd2FpdCB3YWxsZXRDbGllbnQud3JpdGVDb250cmFjdChyZXF1ZXN0KTtcbiAgY29uc3QgcmVjZWlwdCA9IGF3YWl0IHB1YmxpY0NsaWVudC53YWl0Rm9yVHJhbnNhY3Rpb25SZWNlaXB0KHsgaGFzaCB9KTtcbiAgY29uc3QgZXZlbnRMb2dzID0gcGFyc2VFdmVudExvZ3MzKHsgYWJpOiBjb2luQUJJMywgbG9nczogcmVjZWlwdC5sb2dzIH0pO1xuICBjb25zdCBwYXlvdXRSZWNpcGllbnRVcGRhdGVkID0gZXZlbnRMb2dzLmZpbmQoXG4gICAgKGxvZykgPT4gbG9nLmV2ZW50TmFtZSA9PT0gXCJDb2luUGF5b3V0UmVjaXBpZW50VXBkYXRlZFwiXG4gICk7XG4gIHJldHVybiB7IGhhc2gsIHJlY2VpcHQsIHBheW91dFJlY2lwaWVudFVwZGF0ZWQgfTtcbn1cblxuLy8gc3JjL2FjdGlvbnMvdHJhZGVDb2luLnRzXG5pbXBvcnQgeyBwZXJtaXQyQUJJLCBwZXJtaXQyQWRkcmVzcyB9IGZyb20gXCJAem9yYWxhYnMvcHJvdG9jb2wtZGVwbG95bWVudHNcIjtcbmltcG9ydCB7XG4gIGVyYzIwQWJpLFxuICBtYXhVaW50MjU2XG59IGZyb20gXCJ2aWVtXCI7XG5pbXBvcnQgeyBiYXNlIGFzIGJhc2U3IH0gZnJvbSBcInZpZW0vY2hhaW5zXCI7XG5cbi8vIHNyYy9jbGllbnQvY2xpZW50Lmdlbi50c1xuaW1wb3J0IHtcbiAgY3JlYXRlQ2xpZW50LFxuICBjcmVhdGVDb25maWdcbn0gZnJvbSBcIkBoZXktYXBpL2NsaWVudC1mZXRjaFwiO1xudmFyIGNsaWVudCA9IGNyZWF0ZUNsaWVudChcbiAgY3JlYXRlQ29uZmlnKHtcbiAgICBiYXNlVXJsOiBcImh0dHBzOi8vYXBpLXNkay56b3JhLmVuZ2luZWVyaW5nL1wiXG4gIH0pXG4pO1xuXG4vLyBzcmMvY2xpZW50L3Nkay5nZW4udHNcbnZhciBnZXRDb2luID0gKG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIChvcHRpb25zLmNsaWVudCA/PyBjbGllbnQpLmdldCh7XG4gICAgc2VjdXJpdHk6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJhcGkta2V5XCIsXG4gICAgICAgIHR5cGU6IFwiYXBpS2V5XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIHVybDogXCIvY29pblwiLFxuICAgIC4uLm9wdGlvbnNcbiAgfSk7XG59O1xudmFyIGdldENvaW5Db21tZW50cyA9IChvcHRpb25zKSA9PiB7XG4gIHJldHVybiAob3B0aW9ucy5jbGllbnQgPz8gY2xpZW50KS5nZXQoe1xuICAgIHNlY3VyaXR5OiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYXBpLWtleVwiLFxuICAgICAgICB0eXBlOiBcImFwaUtleVwiXG4gICAgICB9XG4gICAgXSxcbiAgICB1cmw6IFwiL2NvaW5Db21tZW50c1wiLFxuICAgIC4uLm9wdGlvbnNcbiAgfSk7XG59O1xudmFyIGdldENvaW5Ib2xkZXJzID0gKG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIChvcHRpb25zLmNsaWVudCA/PyBjbGllbnQpLmdldCh7XG4gICAgc2VjdXJpdHk6IFtcbiAgICAgIHtcbiAgICAgICAgbmFtZTogXCJhcGkta2V5XCIsXG4gICAgICAgIHR5cGU6IFwiYXBpS2V5XCJcbiAgICAgIH1cbiAgICBdLFxuICAgIHVybDogXCIvY29pbkhvbGRlcnNcIixcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRDb2luU3dhcHMgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4gKG9wdGlvbnMuY2xpZW50ID8/IGNsaWVudCkuZ2V0KHtcbiAgICBzZWN1cml0eTogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImFwaS1rZXlcIixcbiAgICAgICAgdHlwZTogXCJhcGlLZXlcIlxuICAgICAgfVxuICAgIF0sXG4gICAgdXJsOiBcIi9jb2luU3dhcHNcIixcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRDb2lucyA9IChvcHRpb25zKSA9PiB7XG4gIHJldHVybiAob3B0aW9ucy5jbGllbnQgPz8gY2xpZW50KS5nZXQoe1xuICAgIHNlY3VyaXR5OiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYXBpLWtleVwiLFxuICAgICAgICB0eXBlOiBcImFwaUtleVwiXG4gICAgICB9XG4gICAgXSxcbiAgICB1cmw6IFwiL2NvaW5zXCIsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn07XG52YXIgc2V0Q3JlYXRlVXBsb2FkSnd0ID0gKG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIChvcHRpb25zPy5jbGllbnQgPz8gY2xpZW50KS5wb3N0KHtcbiAgICBzZWN1cml0eTogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImFwaS1rZXlcIixcbiAgICAgICAgdHlwZTogXCJhcGlLZXlcIlxuICAgICAgfVxuICAgIF0sXG4gICAgdXJsOiBcIi9jcmVhdGVVcGxvYWRKV1RcIixcbiAgICAuLi5vcHRpb25zLFxuICAgIGhlYWRlcnM6IHtcbiAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgLi4ub3B0aW9ucz8uaGVhZGVyc1xuICAgIH1cbiAgfSk7XG59O1xudmFyIGdldEV4cGxvcmUgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4gKG9wdGlvbnMuY2xpZW50ID8/IGNsaWVudCkuZ2V0KHtcbiAgICBzZWN1cml0eTogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImFwaS1rZXlcIixcbiAgICAgICAgdHlwZTogXCJhcGlLZXlcIlxuICAgICAgfVxuICAgIF0sXG4gICAgdXJsOiBcIi9leHBsb3JlXCIsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn07XG52YXIgZ2V0UHJvZmlsZSA9IChvcHRpb25zKSA9PiB7XG4gIHJldHVybiAob3B0aW9ucy5jbGllbnQgPz8gY2xpZW50KS5nZXQoe1xuICAgIHNlY3VyaXR5OiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYXBpLWtleVwiLFxuICAgICAgICB0eXBlOiBcImFwaUtleVwiXG4gICAgICB9XG4gICAgXSxcbiAgICB1cmw6IFwiL3Byb2ZpbGVcIixcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRQcm9maWxlQmFsYW5jZXMgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4gKG9wdGlvbnMuY2xpZW50ID8/IGNsaWVudCkuZ2V0KHtcbiAgICBzZWN1cml0eTogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImFwaS1rZXlcIixcbiAgICAgICAgdHlwZTogXCJhcGlLZXlcIlxuICAgICAgfVxuICAgIF0sXG4gICAgdXJsOiBcIi9wcm9maWxlQmFsYW5jZXNcIixcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRQcm9maWxlQ29pbnMgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4gKG9wdGlvbnMuY2xpZW50ID8/IGNsaWVudCkuZ2V0KHtcbiAgICBzZWN1cml0eTogW1xuICAgICAge1xuICAgICAgICBuYW1lOiBcImFwaS1rZXlcIixcbiAgICAgICAgdHlwZTogXCJhcGlLZXlcIlxuICAgICAgfVxuICAgIF0sXG4gICAgdXJsOiBcIi9wcm9maWxlQ29pbnNcIixcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBwb3N0UXVvdGUgPSAob3B0aW9ucykgPT4ge1xuICByZXR1cm4gKG9wdGlvbnM/LmNsaWVudCA/PyBjbGllbnQpLnBvc3Qoe1xuICAgIHNlY3VyaXR5OiBbXG4gICAgICB7XG4gICAgICAgIG5hbWU6IFwiYXBpLWtleVwiLFxuICAgICAgICB0eXBlOiBcImFwaUtleVwiXG4gICAgICB9XG4gICAgXSxcbiAgICB1cmw6IFwiL3F1b3RlXCIsXG4gICAgLi4ub3B0aW9ucyxcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgIC4uLm9wdGlvbnM/LmhlYWRlcnNcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gc3JjL2FjdGlvbnMvdHJhZGVDb2luLnRzXG5mdW5jdGlvbiBjb252ZXJ0QmlnSW50VG9TdHJpbmcocGVybWl0KSB7XG4gIHJldHVybiB7XG4gICAgLi4ucGVybWl0LFxuICAgIGRldGFpbHM6IHtcbiAgICAgIC4uLnBlcm1pdC5kZXRhaWxzLFxuICAgICAgYW1vdW50OiBgJHtwZXJtaXQuZGV0YWlscy5hbW91bnR9YFxuICAgIH0sXG4gICAgc2lnRGVhZGxpbmU6IGAke3Blcm1pdC5zaWdEZWFkbGluZX1gXG4gIH07XG59XG52YXIgUEVSTUlUX1NJTkdMRV9UWVBFUyA9IHtcbiAgUGVybWl0U2luZ2xlOiBbXG4gICAgeyBuYW1lOiBcImRldGFpbHNcIiwgdHlwZTogXCJQZXJtaXREZXRhaWxzXCIgfSxcbiAgICB7IG5hbWU6IFwic3BlbmRlclwiLCB0eXBlOiBcImFkZHJlc3NcIiB9LFxuICAgIHsgbmFtZTogXCJzaWdEZWFkbGluZVwiLCB0eXBlOiBcInVpbnQyNTZcIiB9XG4gIF0sXG4gIFBlcm1pdERldGFpbHM6IFtcbiAgICB7IG5hbWU6IFwidG9rZW5cIiwgdHlwZTogXCJhZGRyZXNzXCIgfSxcbiAgICB7IG5hbWU6IFwiYW1vdW50XCIsIHR5cGU6IFwidWludDE2MFwiIH0sXG4gICAgeyBuYW1lOiBcImV4cGlyYXRpb25cIiwgdHlwZTogXCJ1aW50NDhcIiB9LFxuICAgIHsgbmFtZTogXCJub25jZVwiLCB0eXBlOiBcInVpbnQ0OFwiIH1cbiAgXVxufTtcbmFzeW5jIGZ1bmN0aW9uIHRyYWRlQ29pbih7XG4gIHRyYWRlUGFyYW1ldGVycyxcbiAgd2FsbGV0Q2xpZW50LFxuICBhY2NvdW50LFxuICBwdWJsaWNDbGllbnQsXG4gIHZhbGlkYXRlVHJhbnNhY3Rpb24gPSB0cnVlXG59KSB7XG4gIGNvbnN0IHF1b3RlID0gYXdhaXQgY3JlYXRlVHJhZGVDYWxsKHRyYWRlUGFyYW1ldGVycyk7XG4gIGlmICghYWNjb3VudCkge1xuICAgIGFjY291bnQgPSB3YWxsZXRDbGllbnQuYWNjb3VudDtcbiAgfVxuICBpZiAoIWFjY291bnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBY2NvdW50IGlzIHJlcXVpcmVkXCIpO1xuICB9XG4gIGlmICghdHJhZGVQYXJhbWV0ZXJzLnJlY2lwaWVudCkge1xuICAgIHRyYWRlUGFyYW1ldGVycy5yZWNpcGllbnQgPSB0eXBlb2YgYWNjb3VudCA9PT0gXCJzdHJpbmdcIiA/IGFjY291bnQgOiBhY2NvdW50LmFkZHJlc3M7XG4gIH1cbiAgY29uc3Qgc2lnbmF0dXJlcyA9IFtdO1xuICBpZiAocXVvdGUucGVybWl0cykge1xuICAgIGZvciAoY29uc3QgcGVybWl0IG9mIHF1b3RlLnBlcm1pdHMpIHtcbiAgICAgIGNvbnN0IFssICwgbm9uY2VdID0gYXdhaXQgcHVibGljQ2xpZW50LnJlYWRDb250cmFjdCh7XG4gICAgICAgIGFiaTogcGVybWl0MkFCSSxcbiAgICAgICAgYWRkcmVzczogcGVybWl0MkFkZHJlc3NbYmFzZTcuaWRdLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IFwiYWxsb3dhbmNlXCIsXG4gICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICBwZXJtaXQucGVybWl0LmRldGFpbHMudG9rZW4sXG4gICAgICAgICAgdHlwZW9mIGFjY291bnQgPT09IFwic3RyaW5nXCIgPyBhY2NvdW50IDogYWNjb3VudC5hZGRyZXNzLFxuICAgICAgICAgIHBlcm1pdC5wZXJtaXQuc3BlbmRlclxuICAgICAgICBdXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHBlcm1pdFRva2VuID0gcGVybWl0LnBlcm1pdC5kZXRhaWxzLnRva2VuO1xuICAgICAgY29uc3QgYWxsb3dhbmNlID0gYXdhaXQgcHVibGljQ2xpZW50LnJlYWRDb250cmFjdCh7XG4gICAgICAgIGFiaTogZXJjMjBBYmksXG4gICAgICAgIGFkZHJlc3M6IHBlcm1pdFRva2VuLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IFwiYWxsb3dhbmNlXCIsXG4gICAgICAgIGFyZ3M6IFtcbiAgICAgICAgICB0eXBlb2YgYWNjb3VudCA9PT0gXCJzdHJpbmdcIiA/IGFjY291bnQgOiBhY2NvdW50LmFkZHJlc3MsXG4gICAgICAgICAgcGVybWl0MkFkZHJlc3NbYmFzZTcuaWRdXG4gICAgICAgIF1cbiAgICAgIH0pO1xuICAgICAgaWYgKGFsbG93YW5jZSA8IEJpZ0ludChwZXJtaXQucGVybWl0LmRldGFpbHMuYW1vdW50KSkge1xuICAgICAgICBjb25zdCBhcHByb3ZhbFR4ID0gYXdhaXQgd2FsbGV0Q2xpZW50LndyaXRlQ29udHJhY3Qoe1xuICAgICAgICAgIGFiaTogZXJjMjBBYmksXG4gICAgICAgICAgYWRkcmVzczogcGVybWl0VG9rZW4sXG4gICAgICAgICAgZnVuY3Rpb25OYW1lOiBcImFwcHJvdmVcIixcbiAgICAgICAgICBjaGFpbjogYmFzZTcsXG4gICAgICAgICAgYXJnczogW3Blcm1pdDJBZGRyZXNzW2Jhc2U3LmlkXSwgbWF4VWludDI1Nl0sXG4gICAgICAgICAgYWNjb3VudFxuICAgICAgICB9KTtcbiAgICAgICAgYXdhaXQgcHVibGljQ2xpZW50LndhaXRGb3JUcmFuc2FjdGlvblJlY2VpcHQoe1xuICAgICAgICAgIGhhc2g6IGFwcHJvdmFsVHhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCBtZXNzYWdlID0ge1xuICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgdG9rZW46IHBlcm1pdC5wZXJtaXQuZGV0YWlscy50b2tlbixcbiAgICAgICAgICBhbW91bnQ6IEJpZ0ludChwZXJtaXQucGVybWl0LmRldGFpbHMuYW1vdW50KSxcbiAgICAgICAgICBleHBpcmF0aW9uOiBOdW1iZXIocGVybWl0LnBlcm1pdC5kZXRhaWxzLmV4cGlyYXRpb24pLFxuICAgICAgICAgIG5vbmNlXG4gICAgICAgIH0sXG4gICAgICAgIHNwZW5kZXI6IHBlcm1pdC5wZXJtaXQuc3BlbmRlcixcbiAgICAgICAgc2lnRGVhZGxpbmU6IEJpZ0ludChwZXJtaXQucGVybWl0LnNpZ0RlYWRsaW5lKVxuICAgICAgfTtcbiAgICAgIGNvbnN0IHNpZ25hdHVyZSA9IGF3YWl0IHdhbGxldENsaWVudC5zaWduVHlwZWREYXRhKHtcbiAgICAgICAgZG9tYWluOiB7XG4gICAgICAgICAgbmFtZTogXCJQZXJtaXQyXCIsXG4gICAgICAgICAgY2hhaW5JZDogYmFzZTcuaWQsXG4gICAgICAgICAgdmVyaWZ5aW5nQ29udHJhY3Q6IHBlcm1pdDJBZGRyZXNzW2Jhc2U3LmlkXVxuICAgICAgICB9LFxuICAgICAgICBwcmltYXJ5VHlwZTogXCJQZXJtaXRTaW5nbGVcIixcbiAgICAgICAgdHlwZXM6IFBFUk1JVF9TSU5HTEVfVFlQRVMsXG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIGFjY291bnQ6IHR5cGVvZiBhY2NvdW50ID09PSBcInN0cmluZ1wiID8gYWNjb3VudCA6IGFjY291bnQuYWRkcmVzc1xuICAgICAgfSk7XG4gICAgICBzaWduYXR1cmVzLnB1c2goe1xuICAgICAgICBzaWduYXR1cmUsXG4gICAgICAgIHBlcm1pdDogY29udmVydEJpZ0ludFRvU3RyaW5nKG1lc3NhZ2UpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgY29uc3QgbmV3UXVvdGUgPSBhd2FpdCBjcmVhdGVUcmFkZUNhbGwoe1xuICAgIC4uLnRyYWRlUGFyYW1ldGVycyxcbiAgICBzaWduYXR1cmVzXG4gIH0pO1xuICBjb25zdCBjYWxsID0ge1xuICAgIHRvOiBuZXdRdW90ZS5jYWxsLnRhcmdldCxcbiAgICBkYXRhOiBuZXdRdW90ZS5jYWxsLmRhdGEsXG4gICAgdmFsdWU6IEJpZ0ludChuZXdRdW90ZS5jYWxsLnZhbHVlKSxcbiAgICBjaGFpbjogYmFzZTcsXG4gICAgYWNjb3VudFxuICB9O1xuICBpZiAodmFsaWRhdGVUcmFuc2FjdGlvbikge1xuICAgIGF3YWl0IHB1YmxpY0NsaWVudC5jYWxsKGNhbGwpO1xuICB9XG4gIGNvbnN0IGdhc0VzdGltYXRlID0gdmFsaWRhdGVUcmFuc2FjdGlvbiA/IGF3YWl0IHB1YmxpY0NsaWVudC5lc3RpbWF0ZUdhcyhjYWxsKSA6IDEwMDAwMDAwbjtcbiAgY29uc3QgZ2FzUHJpY2UgPSBhd2FpdCBwdWJsaWNDbGllbnQuZ2V0R2FzUHJpY2UoKTtcbiAgY29uc3QgdHggPSBhd2FpdCB3YWxsZXRDbGllbnQuc2VuZFRyYW5zYWN0aW9uKHtcbiAgICAuLi5jYWxsLFxuICAgIGdhc1ByaWNlLFxuICAgIGdhczogZ2FzRXN0aW1hdGVcbiAgfSk7XG4gIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCBwdWJsaWNDbGllbnQud2FpdEZvclRyYW5zYWN0aW9uUmVjZWlwdCh7XG4gICAgaGFzaDogdHhcbiAgfSk7XG4gIHJldHVybiByZWNlaXB0O1xufVxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlVHJhZGVDYWxsKHRyYWRlUGFyYW1ldGVycykge1xuICBpZiAodHJhZGVQYXJhbWV0ZXJzLnNsaXBwYWdlICYmIHRyYWRlUGFyYW1ldGVycy5zbGlwcGFnZSA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTbGlwcGFnZSBtdXN0IGJlIGxlc3MgdGhhbiAxLCBtYXggMC45OVwiKTtcbiAgfVxuICBpZiAodHJhZGVQYXJhbWV0ZXJzLmFtb3VudEluID09PSBCaWdJbnQoMCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJBbW91bnQgaW4gbXVzdCBiZSBncmVhdGVyIHRoYW4gMFwiKTtcbiAgfVxuICBjb25zdCBxdW90ZSA9IGF3YWl0IHBvc3RRdW90ZSh7XG4gICAgYm9keToge1xuICAgICAgdG9rZW5JbjogdHJhZGVQYXJhbWV0ZXJzLnNlbGwsXG4gICAgICB0b2tlbk91dDogdHJhZGVQYXJhbWV0ZXJzLmJ1eSxcbiAgICAgIGFtb3VudEluOiB0cmFkZVBhcmFtZXRlcnMuYW1vdW50SW4udG9TdHJpbmcoKSxcbiAgICAgIHNsaXBwYWdlOiB0cmFkZVBhcmFtZXRlcnMuc2xpcHBhZ2UsXG4gICAgICBjaGFpbklkOiBiYXNlNy5pZCxcbiAgICAgIHNlbmRlcjogdHJhZGVQYXJhbWV0ZXJzLnNlbmRlcixcbiAgICAgIHJlY2lwaWVudDogdHJhZGVQYXJhbWV0ZXJzLnJlY2lwaWVudCB8fCB0cmFkZVBhcmFtZXRlcnMuc2VuZGVyLFxuICAgICAgc2lnbmF0dXJlczogdHJhZGVQYXJhbWV0ZXJzLnNpZ25hdHVyZXNcbiAgICB9XG4gIH0pO1xuICBpZiAoIXF1b3RlLmRhdGEpIHtcbiAgICBjb25zb2xlLmVycm9yKHF1b3RlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJRdW90ZSBmYWlsZWRcIik7XG4gIH1cbiAgcmV0dXJuIHF1b3RlLmRhdGE7XG59XG5cbi8vIHNyYy9hcGkvYXBpLWtleS50c1xudmFyIGFwaUtleTtcbmZ1bmN0aW9uIHNldEFwaUtleShrZXkpIHtcbiAgYXBpS2V5ID0ga2V5O1xufVxuZnVuY3Rpb24gZ2V0QXBpS2V5KCkge1xuICByZXR1cm4gYXBpS2V5O1xufVxuZnVuY3Rpb24gZ2V0QXBpS2V5TWV0YSgpIHtcbiAgaWYgKCFhcGlLZXkpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICBcImFwaS1rZXlcIjogYXBpS2V5XG4gICAgfVxuICB9O1xufVxuXG4vLyBzcmMvYXBpL3F1ZXJpZXMudHNcbnZhciBnZXRDb2luMiA9IGFzeW5jIChxdWVyeSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gYXdhaXQgZ2V0Q29pbih7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBxdWVyeSxcbiAgICAuLi5nZXRBcGlLZXlNZXRhKClcbiAgfSk7XG59O1xudmFyIGdldENvaW5zMiA9IGFzeW5jIChxdWVyeSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gYXdhaXQgZ2V0Q29pbnMoe1xuICAgIHF1ZXJ5OiB7XG4gICAgICBjb2luczogcXVlcnkuY29pbnMubWFwKChjb2luRGF0YSkgPT4gSlNPTi5zdHJpbmdpZnkoY29pbkRhdGEpKVxuICAgIH0sXG4gICAgLi4uZ2V0QXBpS2V5TWV0YSgpLFxuICAgIC4uLm9wdGlvbnNcbiAgfSk7XG59O1xudmFyIGdldENvaW5Ib2xkZXJzMiA9IGFzeW5jIChxdWVyeSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gYXdhaXQgZ2V0Q29pbkhvbGRlcnMoe1xuICAgIHF1ZXJ5LFxuICAgIC4uLmdldEFwaUtleU1ldGEoKSxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRDb2luU3dhcHMyID0gYXN5bmMgKHF1ZXJ5LCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBhd2FpdCBnZXRDb2luU3dhcHMoe1xuICAgIHF1ZXJ5LFxuICAgIC4uLmdldEFwaUtleU1ldGEoKSxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRDb2luQ29tbWVudHMyID0gYXN5bmMgKHF1ZXJ5LCBvcHRpb25zKSA9PiB7XG4gIHJldHVybiBhd2FpdCBnZXRDb2luQ29tbWVudHMoe1xuICAgIHF1ZXJ5LFxuICAgIC4uLmdldEFwaUtleU1ldGEoKSxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcbnZhciBnZXRQcm9maWxlMiA9IGFzeW5jIChxdWVyeSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gYXdhaXQgZ2V0UHJvZmlsZSh7XG4gICAgcXVlcnksXG4gICAgLi4uZ2V0QXBpS2V5TWV0YSgpLFxuICAgIC4uLm9wdGlvbnNcbiAgfSk7XG59O1xudmFyIGdldFByb2ZpbGVDb2luczIgPSBhc3luYyAocXVlcnksIG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIGF3YWl0IGdldFByb2ZpbGVDb2lucyh7XG4gICAgcXVlcnksXG4gICAgLi4uZ2V0QXBpS2V5TWV0YSgpLFxuICAgIC4uLm9wdGlvbnNcbiAgfSk7XG59O1xudmFyIGdldFByb2ZpbGVCYWxhbmNlczIgPSBhc3luYyAocXVlcnksIG9wdGlvbnMpID0+IHtcbiAgcmV0dXJuIGF3YWl0IGdldFByb2ZpbGVCYWxhbmNlcyh7XG4gICAgcXVlcnksXG4gICAgLi4uZ2V0QXBpS2V5TWV0YSgpLFxuICAgIC4uLm9wdGlvbnNcbiAgfSk7XG59O1xuXG4vLyBzcmMvYXBpL2V4cGxvcmUudHNcbnZhciBjcmVhdGVFeHBsb3JlUXVlcnkgPSAocXVlcnksIGxpc3RUeXBlLCBvcHRpb25zKSA9PiBnZXRFeHBsb3JlKHtcbiAgLi4ub3B0aW9ucyxcbiAgcXVlcnk6IHsgLi4ucXVlcnksIGxpc3RUeXBlIH0sXG4gIC4uLmdldEFwaUtleU1ldGEoKVxufSk7XG52YXIgZ2V0Q29pbnNUb3BHYWluZXJzID0gKHF1ZXJ5ID0ge30sIG9wdGlvbnMpID0+IGNyZWF0ZUV4cGxvcmVRdWVyeShxdWVyeSwgXCJUT1BfR0FJTkVSU1wiLCBvcHRpb25zKTtcbnZhciBnZXRDb2luc1RvcFZvbHVtZTI0aCA9IChxdWVyeSA9IHt9LCBvcHRpb25zKSA9PiBjcmVhdGVFeHBsb3JlUXVlcnkocXVlcnksIFwiVE9QX1ZPTFVNRV8yNEhcIiwgb3B0aW9ucyk7XG52YXIgZ2V0Q29pbnNNb3N0VmFsdWFibGUgPSAocXVlcnkgPSB7fSwgb3B0aW9ucykgPT4gY3JlYXRlRXhwbG9yZVF1ZXJ5KHF1ZXJ5LCBcIk1PU1RfVkFMVUFCTEVcIiwgb3B0aW9ucyk7XG52YXIgZ2V0Q29pbnNOZXcgPSAocXVlcnkgPSB7fSwgb3B0aW9ucykgPT4gY3JlYXRlRXhwbG9yZVF1ZXJ5KHF1ZXJ5LCBcIk5FV1wiLCBvcHRpb25zKTtcbnZhciBnZXRDb2luc0xhc3RUcmFkZWQgPSAocXVlcnkgPSB7fSwgb3B0aW9ucykgPT4gY3JlYXRlRXhwbG9yZVF1ZXJ5KHF1ZXJ5LCBcIkxBU1RfVFJBREVEXCIsIG9wdGlvbnMpO1xudmFyIGdldENvaW5zTGFzdFRyYWRlZFVuaXF1ZSA9IChxdWVyeSA9IHt9LCBvcHRpb25zKSA9PiBjcmVhdGVFeHBsb3JlUXVlcnkocXVlcnksIFwiTEFTVF9UUkFERURfVU5JUVVFXCIsIG9wdGlvbnMpO1xudmFyIGdldENyZWF0b3JDb2lucyA9IChxdWVyeSA9IHt9LCBvcHRpb25zKSA9PiBjcmVhdGVFeHBsb3JlUXVlcnkocXVlcnksIFwiTkVXX0NSRUFUT1JTXCIsIG9wdGlvbnMpO1xudmFyIGdldE1vc3RWYWx1YWJsZUNyZWF0b3JDb2lucyA9IChxdWVyeSA9IHt9LCBvcHRpb25zKSA9PiBjcmVhdGVFeHBsb3JlUXVlcnkocXVlcnksIFwiTU9TVF9WQUxVQUJMRV9DUkVBVE9SU1wiLCBvcHRpb25zKTtcblxuLy8gc3JjL3VwbG9hZGVyL21ldGFkYXRhLnRzXG5mdW5jdGlvbiB2YWxpZGF0ZUltYWdlTWltZVR5cGUobWltZVR5cGUpIHtcbiAgaWYgKCFbXG4gICAgXCJpbWFnZS9wbmdcIixcbiAgICBcImltYWdlL2pwZWdcIixcbiAgICBcImltYWdlL2pwZ1wiLFxuICAgIFwiaW1hZ2UvZ2lmXCIsXG4gICAgXCJpbWFnZS9zdmcreG1sXCJcbiAgXS5pbmNsdWRlcyhtaW1lVHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbWFnZSBtdXN0IGJlIGEgUE5HLCBKUEVHLCBKUEcsIEdJRiBvciBTVkdcIik7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFVSTEZyb21VcGxvYWRSZXN1bHQodXBsb2FkUmVzdWx0KSB7XG4gIHJldHVybiBuZXcgVVJMKHVwbG9hZFJlc3VsdC51cmwpO1xufVxudmFyIENvaW5NZXRhZGF0YUJ1aWxkZXIgPSBjbGFzcyB7XG4gIHdpdGhOYW1lKG5hbWUpIHtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB3aXRoU3ltYm9sKHN5bWJvbCkge1xuICAgIHRoaXMuc3ltYm9sID0gc3ltYm9sO1xuICAgIGlmICh0eXBlb2Ygc3ltYm9sICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTeW1ib2wgbXVzdCBiZSBhIHN0cmluZ1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgd2l0aERlc2NyaXB0aW9uKGRlc2NyaXB0aW9uKSB7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRpb24gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRlc2NyaXB0aW9uIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHdpdGhJbWFnZShpbWFnZSkge1xuICAgIGlmICh0aGlzLmltYWdlVVJMKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbWFnZSBVUkwgYWxyZWFkeSBzZXRcIik7XG4gICAgfVxuICAgIGlmICghKGltYWdlIGluc3RhbmNlb2YgRmlsZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkltYWdlIG11c3QgYmUgYSBGaWxlXCIpO1xuICAgIH1cbiAgICB2YWxpZGF0ZUltYWdlTWltZVR5cGUoaW1hZ2UudHlwZSk7XG4gICAgdGhpcy5pbWFnZUZpbGUgPSBpbWFnZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB3aXRoSW1hZ2VVUkkoaW1hZ2VVUkkpIHtcbiAgICBpZiAodGhpcy5pbWFnZUZpbGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkltYWdlIGZpbGUgYWxyZWFkeSBzZXRcIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW1hZ2VVUkkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkltYWdlIFVSSSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgIH1cbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGltYWdlVVJJKTtcbiAgICB0aGlzLmltYWdlVVJMID0gdXJsO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHdpdGhQcm9wZXJ0aWVzKHByb3BlcnRpZXMpIHtcbiAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhwcm9wZXJ0aWVzKSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJvcGVydHkga2V5IG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlByb3BlcnR5IHZhbHVlIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5wcm9wZXJ0aWVzID0geyAuLi50aGlzLnByb3BlcnRpZXMsIC4uLnByb3BlcnRpZXMgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB3aXRoTWVkaWEobWVkaWEpIHtcbiAgICBpZiAodGhpcy5tZWRpYVVSTCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVkaWEgVVJMIGFscmVhZHkgc2V0XCIpO1xuICAgIH1cbiAgICBpZiAoIShtZWRpYSBpbnN0YW5jZW9mIEZpbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZWRpYSBtdXN0IGJlIGEgRmlsZVwiKTtcbiAgICB9XG4gICAgdGhpcy5tZWRpYU1pbWVUeXBlID0gbWVkaWEudHlwZTtcbiAgICB0aGlzLm1lZGlhRmlsZSA9IG1lZGlhO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHdpdGhNZWRpYVVSSShtZWRpYVVSSSwgbWVkaWFNaW1lVHlwZSkge1xuICAgIGlmICh0aGlzLm1lZGlhRmlsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVkaWEgZmlsZSBhbHJlYWR5IHNldFwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtZWRpYVVSSSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWVkaWEgVVJJIG11c3QgYmUgYSBzdHJpbmdcIik7XG4gICAgfVxuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwobWVkaWFVUkkpO1xuICAgIHRoaXMubWVkaWFVUkwgPSB1cmw7XG4gICAgdGhpcy5tZWRpYU1pbWVUeXBlID0gbWVkaWFNaW1lVHlwZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YWxpZGF0ZSgpIHtcbiAgICBpZiAoIXRoaXMubmFtZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTmFtZSBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnN5bWJvbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU3ltYm9sIGlzIHJlcXVpcmVkXCIpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaW1hZ2VGaWxlICYmICF0aGlzLmltYWdlVVJMKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbWFnZSBpcyByZXF1aXJlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ2VuZXJhdGVNZXRhZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgc3ltYm9sOiB0aGlzLnN5bWJvbCxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2VVUkwudG9TdHJpbmcoKSxcbiAgICAgIGFuaW1hdGlvbl91cmw6IHRoaXMubWVkaWFVUkw/LnRvU3RyaW5nKCksXG4gICAgICBjb250ZW50OiB0aGlzLm1lZGlhVVJMID8ge1xuICAgICAgICB1cmk6IHRoaXMubWVkaWFVUkw/LnRvU3RyaW5nKCksXG4gICAgICAgIG1pbWU6IHRoaXMubWVkaWFNaW1lVHlwZVxuICAgICAgfSA6IHZvaWQgMCxcbiAgICAgIHByb3BlcnRpZXM6IHRoaXMucHJvcGVydGllc1xuICAgIH07XG4gIH1cbiAgYXN5bmMgdXBsb2FkKHVwbG9hZGVyKSB7XG4gICAgdGhpcy52YWxpZGF0ZSgpO1xuICAgIGlmICh0aGlzLmltYWdlRmlsZSkge1xuICAgICAgY29uc3QgdXBsb2FkUmVzdWx0MiA9IGF3YWl0IHVwbG9hZGVyLnVwbG9hZCh0aGlzLmltYWdlRmlsZSk7XG4gICAgICB0aGlzLmltYWdlVVJMID0gZ2V0VVJMRnJvbVVwbG9hZFJlc3VsdCh1cGxvYWRSZXN1bHQyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubWVkaWFGaWxlKSB7XG4gICAgICBjb25zdCB1cGxvYWRSZXN1bHQyID0gYXdhaXQgdXBsb2FkZXIudXBsb2FkKHRoaXMubWVkaWFGaWxlKTtcbiAgICAgIHRoaXMubWVkaWFVUkwgPSBnZXRVUkxGcm9tVXBsb2FkUmVzdWx0KHVwbG9hZFJlc3VsdDIpO1xuICAgIH1cbiAgICBjb25zdCBtZXRhZGF0YSA9IHRoaXMuZ2VuZXJhdGVNZXRhZGF0YSgpO1xuICAgIGNvbnN0IHVwbG9hZFJlc3VsdCA9IGF3YWl0IHVwbG9hZGVyLnVwbG9hZChcbiAgICAgIG5ldyBGaWxlKFtKU09OLnN0cmluZ2lmeShtZXRhZGF0YSldLCBcIm1ldGFkYXRhLmpzb25cIiwge1xuICAgICAgICB0eXBlOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICB1cmw6IGdldFVSTEZyb21VcGxvYWRSZXN1bHQodXBsb2FkUmVzdWx0KS50b1N0cmluZygpLFxuICAgICAgY3JlYXRlTWV0YWRhdGFQYXJhbWV0ZXJzOiB7XG4gICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgc3ltYm9sOiB0aGlzLnN5bWJvbCxcbiAgICAgICAgdXJpOiB1cGxvYWRSZXN1bHQudXJsXG4gICAgICB9LFxuICAgICAgbWV0YWRhdGFcbiAgICB9O1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlTWV0YWRhdGFCdWlsZGVyKCkge1xuICByZXR1cm4gbmV3IENvaW5NZXRhZGF0YUJ1aWxkZXIoKTtcbn1cblxuLy8gc3JjL2FwaS9pbnRlcm5hbC50c1xudmFyIHNldENyZWF0ZVVwbG9hZEp3dDIgPSBhc3luYyAoYm9keSwgb3B0aW9ucykgPT4ge1xuICByZXR1cm4gYXdhaXQgc2V0Q3JlYXRlVXBsb2FkSnd0KHtcbiAgICBib2R5LFxuICAgIC4uLmdldEFwaUtleU1ldGEoKSxcbiAgICAuLi5vcHRpb25zXG4gIH0pO1xufTtcblxuLy8gc3JjL3VwbG9hZGVyL3Byb3ZpZGVycy96b3JhLnRzXG52YXIgWm9yYVVwbG9hZGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjcmVhdG9yQWRkcmVzcykge1xuICAgIHRoaXMuY3JlYXRvckFkZHJlc3MgPSBjcmVhdG9yQWRkcmVzcztcbiAgICBpZiAoIWdldEFwaUtleSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBUEkga2V5IGlzIHJlcXVpcmVkIGZvciBtZXRhZGF0YSBpbnRlcmFjdGlvbnNcIik7XG4gICAgfVxuICB9XG4gIGFzeW5jIGdldEpXVEFwaUtleSgpIHtcbiAgICBpZiAodGhpcy5qd3RBcGlLZXkgJiYgdGhpcy5qd3RBcGlLZXlFeHBpcmVzQXQgJiYgdGhpcy5qd3RBcGlLZXlFeHBpcmVzQXQgPiBEYXRlLm5vdygpKSB7XG4gICAgICByZXR1cm4gdGhpcy5qd3RBcGlLZXk7XG4gICAgfVxuICAgIHRoaXMuand0QXBpS2V5RXhwaXJlc0F0ID0gRGF0ZS5ub3coKSArIDFlMyAqIDYwICogNjA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBzZXRDcmVhdGVVcGxvYWRKd3QyKHtcbiAgICAgIGNyZWF0b3JBZGRyZXNzOiB0aGlzLmNyZWF0b3JBZGRyZXNzXG4gICAgfSk7XG4gICAgdGhpcy5qd3RBcGlLZXkgPSByZXNwb25zZS5kYXRhPy5jcmVhdGVVcGxvYWRKd3RGcm9tQXBpS2V5O1xuICAgIGlmICghdGhpcy5qd3RBcGlLZXkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgdXBsb2FkIEpXVFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuand0QXBpS2V5O1xuICB9XG4gIGFzeW5jIHVwbG9hZChmaWxlKSB7XG4gICAgY29uc3Qgand0QXBpS2V5ID0gYXdhaXQgdGhpcy5nZXRKV1RBcGlLZXkoKTtcbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGZvcm1EYXRhLmFwcGVuZChcImZpbGVcIiwgZmlsZSwgZmlsZS5uYW1lKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgXCJodHRwczovL2lwZnMtdXBsb2FkZXIuem9yYS5jby9hcGkvdjAvYWRkP2NpZC12ZXJzaW9uPTFcIixcbiAgICAgIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHtqd3RBcGlLZXl9YCxcbiAgICAgICAgICBBY2NlcHQ6IFwiKi8qXCJcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogZm9ybURhdGFcbiAgICAgIH1cbiAgICApO1xuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYXdhaXQgcmVzcG9uc2UudGV4dCgpKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHVwbG9hZCBmaWxlOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVybDogYGlwZnM6Ly8ke2RhdGEuY2lkfWAsXG4gICAgICBzaXplOiBkYXRhLnNpemUsXG4gICAgICBtaW1lVHlwZTogZGF0YS5taW1lVHlwZVxuICAgIH07XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVab3JhVXBsb2FkZXJGb3JDcmVhdG9yKGNyZWF0b3JBZGRyZXNzKSB7XG4gIHJldHVybiBuZXcgWm9yYVVwbG9hZGVyKGNyZWF0b3JBZGRyZXNzKTtcbn1cbmV4cG9ydCB7XG4gIENvaW5NZXRhZGF0YUJ1aWxkZXIsXG4gIERlcGxveUN1cnJlbmN5LFxuICBJbml0aWFsUHVyY2hhc2VDdXJyZW5jeSxcbiAgWm9yYVVwbG9hZGVyLFxuICBjbGVhbkFuZFZhbGlkYXRlTWV0YWRhdGFVUkksXG4gIGNyZWF0ZUNvaW4sXG4gIGNyZWF0ZUNvaW5DYWxsLFxuICBjcmVhdGVNZXRhZGF0YUJ1aWxkZXIsXG4gIGNyZWF0ZVRyYWRlQ2FsbCxcbiAgY3JlYXRlWm9yYVVwbG9hZGVyRm9yQ3JlYXRvcixcbiAgZ2V0Q29pbjIgYXMgZ2V0Q29pbixcbiAgZ2V0Q29pbkNvbW1lbnRzMiBhcyBnZXRDb2luQ29tbWVudHMsXG4gIGdldENvaW5DcmVhdGVGcm9tTG9ncyxcbiAgZ2V0Q29pbkhvbGRlcnMyIGFzIGdldENvaW5Ib2xkZXJzLFxuICBnZXRDb2luU3dhcHMyIGFzIGdldENvaW5Td2FwcyxcbiAgZ2V0Q29pbnMyIGFzIGdldENvaW5zLFxuICBnZXRDb2luc0xhc3RUcmFkZWQsXG4gIGdldENvaW5zTGFzdFRyYWRlZFVuaXF1ZSxcbiAgZ2V0Q29pbnNNb3N0VmFsdWFibGUsXG4gIGdldENvaW5zTmV3LFxuICBnZXRDb2luc1RvcEdhaW5lcnMsXG4gIGdldENvaW5zVG9wVm9sdW1lMjRoLFxuICBnZXRDcmVhdG9yQ29pbnMsXG4gIGdldE1vc3RWYWx1YWJsZUNyZWF0b3JDb2lucyxcbiAgZ2V0T25jaGFpbkNvaW5EZXRhaWxzLFxuICBnZXRQcm9maWxlMiBhcyBnZXRQcm9maWxlLFxuICBnZXRQcm9maWxlQmFsYW5jZXMyIGFzIGdldFByb2ZpbGVCYWxhbmNlcyxcbiAgZ2V0UHJvZmlsZUNvaW5zMiBhcyBnZXRQcm9maWxlQ29pbnMsXG4gIGdldFVSTEZyb21VcGxvYWRSZXN1bHQsXG4gIHNldEFwaUtleSxcbiAgdHJhZGVDb2luLFxuICB1cGRhdGVDb2luVVJJLFxuICB1cGRhdGVDb2luVVJJQ2FsbCxcbiAgdXBkYXRlUGF5b3V0UmVjaXBpZW50LFxuICB1cGRhdGVQYXlvdXRSZWNpcGllbnRDYWxsLFxuICB2YWxpZGF0ZUltYWdlTWltZVR5cGUsXG4gIHZhbGlkYXRlTWV0YWRhdGFKU09OLFxuICB2YWxpZGF0ZU1ldGFkYXRhVVJJQ29udGVudFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@zoralabs+coins-sdk@0.2.11_abitype@1.0.8_typescript@5.8.3_zod@3.25.76__viem@2.33.3_bufferutil_nyuorzcprjz4opwbugae6lymyq/node_modules/@zoralabs/coins-sdk/dist/index.js\n");

/***/ })

};
;